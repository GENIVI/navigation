/* 
SPDX-License-Identifier: MPL-2.0
Copyright (C) 2015-2016, PCA Peugeot Citroën, XS Embedded GmbH, TomTom International B.V., Continental Automotive GmbH, BMW Car IT GmbH,  Alpine Electronics R&D Europe GmbH, AISIN AW CO., LTD.,  Neusoft Technology Solutions GmbH, Jaguar Land Rover Limited, Visteon Corporation, Elektrobit Automotive GmbH, Harman-Becker Automotive GmbH
This Source Code Form is subject to the terms of the
Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with
this file, you can obtain one at http://mozilla.org/MPL/2.0/.
*/

package org.genivi.navigation

import org.genivi.navigation.NavigationTypes.* from "NavigationTypes.fidl"


<** @description : This interface offers methods that implement the configuration of the navigation core.**>
interface NavigationSettings {
	version {
		major 0 
		minor 1
	}
	
	<**	@description : This method returns the API version .**>
	method getVersion {
		out {
			<** @description: .**>
			Version ^version				
		}	
	}		
	
	<**	@description : Set the current language set. If the language is not supported, the default details will be returned in the native language.**>
	method setLocale {
		in {
			<** @description : the language to be used. ISO 639‐3 language code (lower case)**>
			String languageCode				
			<** @description : the country specific variant for the language to be used. ISO 3166‐1 alpha 3 country code (upper case)**>
			String countryCode				
			<** @description : the script specific variant for the language to be used. ISO 15924 alpha 4 script code (upper case)**>
			String scriptCode				
		}	
	}	

	<**	@description : Get the current language set .**>
	method getLocale {
		out {
			<** @description : the language used. ISO 639‐3 language code (lower case)**>
			String languageCode				
			<** @description : the country specific variant for the language used. ISO 3166‐1 alpha 3 country code (upper case)**>
			String countryCode				
			<** @description : the script specific variant for the language used. ISO 15924 alpha 4 script code (upper case)**>
			String scriptCode				
		}	
	}	

	<**	@description : Get the supported set of locales .**>
	method getSupportedLocales {
		out {
			<** @description : array[struct(languageCode,countryCode,scriptCode)]**>
			Locales[] localeList				
		}	
	}	

	<**	@description : Set the time format.**>
	method SetTimeFormat {
		in {
			<** @description : timeFormat = enum(INVALID,12H,24H, ... ). **>
			TimeFormat format				
		}	
	}	

	<**	@description : Get the current time format .**>
	method GetTimeFormat {
		out {
			<** @description : timeFormat = enum(INVALID,12H,24H, ... ). **>
			TimeFormat format				
		}	
	}	

	<**	@description : Get the supported set of time format .**>
	method GetSupportedTimeFormats {
		out {
			<** @description : timeFormatList = array[timeFormat] .**>
			TimeFormat[] timeFormatList				
		}	
	}	

	<**	@description : Set the coordinates format.**>
	method SetCoordinatesFormat {
		in {
			<** @description : coordinatesFormat = enum(INVALID,DEGREES,MINUTES,SECONDS, ... )**>
			CoordinatesFormat coordinatesFormat				
		}	
	}	

	<**	@description : Get the coordinates format .**>
	method GetCoordinatesFormat {
		out {
			<** @description : coordinatesFormat = enum(INVALID,DEGREES,MINUTES,SECONDS, ... )**>
			CoordinatesFormat coordinatesFormat				
		}	
	}	

	<**	@description : Get the supported set of coordinates format .**>
	method getSupportedCoordinatesFormat {
		out {
			<** @description : array[struct(languageCode,countryCode,scriptCode)]**>
			CoordinatesFormat[] coordinatesFormatList				
		}	
	}	

/* to do: add units of measurements */
}