// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2014, PCA Peugeot Citroën, XS Embedded GmbH, TomTom International B.V., Continental Automotive GmbH, BMW Car IT GmbH,  Alpine Electronics R&D Europe GmbH, AISIN AW CO., LTD.,  Neusoft Technology Solutions GmbH, Jaguar Land Rover Limited, Visteon Corporation, Elektrobit Automotive GmbH
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with
// this file, you can obtain one at http://mozilla.org/MPL/2.0/.

package org.genivi.navigation.navigationcore

import org.genivi.navigation.NavigationTypes.* from "../NavigationTypes.fidl"

typeCollection MapViewerControlTypes {
	
	enumeration MapViewType extends BasicEnum {
		MAIN_MAP		= "0x0010"
		SPLIT_SCREEN	= "0x0011"
		
		GUIDING_MAP
	}
	
	enumeration MapScaleMode extends BasicEnum {
		AUTOMATIC		= "0x0110"
		MANUAL			= "0x0111"
		HYBRID			= "0x0112"
	}

	enumeration MapPerspective extends BasicEnum {
		PERSPECTIVE_2D	= "0x0020"
		PERSPECTIVE_3D	= "0x0021"
	}

	enumeration MapObject extends BasicEnum {
		// TODO: Check which elements are really visible
		DET_POI                           //Points Of Interest
		DET_TTI                           //TTI elements
		DET_ONE_WAY_STREET_ARROW          //Arrows marking one way streets
		DET_CITY_NAME                     //City names
		DET_ROAD_NAME                     //Road names
		DET_MOTORWAY_EXIT_MARKER          //Motorway exit signs
		DET_TRAFFIC_LIGHT                 //Traffic lights
		DET_TRAFFIC_LIGHTS_ALONG_ROUTE    //Traffic lights along the route
		DET_ROAD_ICON                     //Road icons
		DET_DTM                           //Digital Terrain Model
		DET_LANDMARKS_3D                  //3D landmarks
		DET_FAVORITES                     //Saved favorite destinations
		DET_ROUTE_BLOCKING                //Highlighting of blocked routes
		DET_ROAD                          //Roads
		DET_POLYGON                       //Polygons
		DET_DESTINATION                   //Destination flag
		DET_MANOEUVRE_MARKER              //Manoeuvre point markers
		DET_LANE_GUIDANCE_MARKER          //Lange guidance point markers
		DET_ROUTE                         //Route
		DET_MANOEUVRE_ARROW               //Manoeuvre arrows
		DET_TREKKING_TOUR                 //Trekking tours
		DET_TTI_EDGE_HIGHLIGHTING         //TTI highlighted edges
		DET_CITY_MARKER                   //City markers
		DET_VEHICLE                       //Vehicle
		DET_POLYGON_NAME                  //Name of polygons
		DET_OFF_ROAD_ROUTE                //Connection line between end of a route and an off-road destination
		DET_TTI_ARROW                     //Direction arrow for TTI messages
		DET_POI_NAME                      //Points Of Interest with a label
		DET_RASTER_MAP                    //Raster maps
		DET_BREAD_CRUMB_TRAIL             //Line that connects bread crumbs (past positions)
		DET_EDGE_HIGHLIGHTING             //Draw highlighted edges that were selected by MAP_POINT_QUERY0 - MAP_POINT_QUERY4.
		DET_DIRECTION_ARROW               //Draw arrows that indicate driving or walking direction.
		DET_CITY_BUILDINGS                //Render city buildings.
		DET_FPS_DISPLAY                   //Measure and display frames per second.
		DET_CROSSHAIR                     //Display crosshair.
		DET_DEVDROP_BANNER                //Enables drawing of a banner. The banner indicates that the current version is a developer's version. The banner is rendered across the display.
		DET_FRAME_AROUND_MAP 			   //a frame is rendered around the map.
		DET_CORONA                        //a corona is drawn around the earth.
		DET_WATEREFFECT                   //Demo effect for water.
		DET_TREES                         //Demo effect for trees.
		DET_RAIN                          //Demo effect for rain.
		DET_CITYMODEL_ROUTE_TRANSPARENCY  //Render buildings transparently around route.
		DET_ROUTE_DESTINATION             //Render destination POIs (e.g. destination flags).
		DET_RANGE_DISPLAY                 //Display range display.
		DET_POI_BRANDS                    //Display branded POIs.
		DET_WEATHER_MARKER                //DrawingElementType_DET_WEATHER_MARKER
		DET_WEATHER_OVERLAY               //Weather map overlay
		DET_WAYPOINT_ROUTE
		DET_WAYPOINT_ROUTE_MARKER
		DET_STENCIL		
	}

	enumeration PanAction extends BasicEnum {
		PAN_START		= "0x0100"
		PAN_TO			= "0x0101"
		PAN_END			= "0x0102"
	}
	
	enumeration Visibility extends BasicEnum {
		VISIBLE			= "0x0043"
		INVISIBLE		= "0x0044"
		FROZEN			= "0x0045"
	}

	enumeration Level extends BasicEnum {
		LEVEL_1			= "0x0050"
		LEVEL_2			= "0x0051"
		LEVEL_3			= "0x0052"
		LEVEL_4			= "0x0053"
		LEVEL_5			= "0x0054"
	}

	enumeration MapTheme extends BasicEnum {		
		THEME_BMW_CLASSIC_DAY
		THEME_BMW_CLASSIC_NIGHT
		THEME_BMW_CLASSIC_TRAFFIC_DAY
		THEME_BMW_CLASSIC_TRAFFIC_NIGHT
		THEME_BMW_ALTERNATIVE_DAY
		THEME_BMW_ALTERNATIVE_NIGHT
		THEME_BMW_ALTERNATIVE_TRAFFIC_DAY
		THEME_BMW_ALTERNATIVE_TRAFFIC_NIGHT
		THEME_BMW_GUIDING

		THEME_MINI_CLASSIC_DAY
		THEME_MINI_CLASSIC_NIGHT
		THEME_MINI_CLASSIC_TRAFFIC_DAY
		THEME_MINI_CLASSIC_TRAFFIC_NIGHT
		THEME_MINI_ALTERNATIVE_DAY
		THEME_MINI_ALTERNATIVE_NIGHT
		THEME_MINI_ALTERNATIVE_TRAFFIC_DAY
		THEME_MINI_ALTERNATIVE_TRAFFIC_NIGHT
		THEME_MINI_GUIDING

		THEME_I_CLASSIC_DAY
		THEME_I_CLASSIC_NIGHT
		THEME_I_CLASSIC_TRAFFIC_DAY
		THEME_I_CLASSIC_TRAFFIC_NIGHT
		THEME_I_ALTERNATIVE_DAY
		THEME_I_ALTERNATIVE_NIGHT
		THEME_I_ALTERNATIVE_TRAFFIC_DAY
		THEME_I_ALTERNATIVE_TRAFFIC_NIGHT
		THEME_I_GUIDING						
	}

	<**
		@description : struct generated for DBus argument CreateMapViewInstance_mapViewSize
	**>
	struct Dimension {
		UInt16 horizontalSize
		UInt16 verticalSize
	}

	map MapObjectVisibility {
		MapObject to Boolean
	}

	enumeration MapScaleUnit extends BasicEnum {
		METER		= "0x0032"
		MILE		= "0x0033"
		KM			= "0x0034"
		YARD		= "0x0035"
		FOOT		= "0x0036"
	}

	enumeration MapScaleType extends BasicEnum {
		MIN			= "0x0040"
		MAX			= "0x0041"
		MID			= "0x0042"
	}

	enumeration SelectableMapType extends BasicEnum {
        MET_POI = "2"                            //POI.
        MET_POLYGON = "3"                        //Polygons.
        MET_EDGE = "4"                           //All edges except roads. E.g. railways rivers ferries.
        MET_ROAD = "5"                           //Road edges.
        MET_ROAD_ICON = "6"                      //Road icons.
        MET_TTI_ICON = "7"                       //TTI icons.
        MET_TTI_EDGE = "8"                       //TTI edge [Not yet supported].
        MET_CITY_MARKER = "9"                    //City names and city markers.
        MET_ROUTE = "10"                         //Tours.
        MET_TREKKING_ROUTE = "11"                //Trekking tours.
        MET_POSITION = "12"                      //Position.
        MET_LANDMARK = "13"                      //Landmarks.
        MET_DESTINATION = "14"                   //Destinations.
        MET_FAVORITE = "15"                      //Favorites.
        MET_PICTURE = "16"                       //Picture.
        MET_GENERIC_MARKER  = "17"                //Generic markers like weather markers.
		
		CUSTOM_ELEMENT		= "0x0120"
		CURRENT_POSITION	= "0x0121"
		WAYPOINT			= "0x0122"
		POI					= "0x0123"
		TRAFFIC_INCIDENT	= "0x0124"	
		ROUTE				= "0x0125"
		GEOCOORDINATES		= "0x0126"
	}

	<**
		@description : struct generated for DBus argument GetScaleList_scaleList
	**>
	struct MapScale {
		UInt16 scaleId
		UInt16 scaleValue
		MapScaleUnit unit
		UInt32 millimetersPerPixel
	}


	<**
		@description : struct generated for DBus argument SetMapViewSaveArea_saveArea
	**>
	struct MapViewArea {
		Double left
		Double right
		Double top
		Double bottom
	}

	<**
		@description : struct generated for DBus argument SetMapViewPan_pixelCoordinates
	**>
	struct Pixel {
		UInt16 x
		UInt16 y
	}


	<**
		@description : struct generated for DBus argument GetDisplayedRoutes_displayedRoutes
	**>
	struct DisplayedRoute {
		Handle	routeHandle
		Boolean highlighted
	}



	<**
		@description : struct generated for DBus argument DisplayCustomElements_customElementsElem4
	**>
	struct AnchorPoint {
		Int16 x
		Int16 y
	}

	<**
		@description : struct generated for DBus argument DisplayCustomElements_customElements
	**>
	struct CustomElement {
		String name
		String iconUri
		Coordinate2D coordinate
		AnchorPoint elem4
	}


	map tCustomElementDict {
		Handle to CustomElement
	}

	<**
		@description : struct generated for DBus argument SelectElementsOnMap_selectedElements
	**>
	struct SelectedMapElement {
		SelectableMapType type
		Coordinate2D position
		ElementValue value
	}

	union ElementValue {
		Int32 trafficIncident
		Handle handle
		CustomElement element
	}
	
	
}