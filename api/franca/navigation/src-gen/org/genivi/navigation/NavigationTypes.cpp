/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include "NavigationTypes.h"


namespace org {
namespace genivi {
namespace navigation {
namespace NavigationTypes {


Version::Version(const uint16_t& versionMajorValue, const uint16_t& versionMinorValue, const uint16_t& versionMicroValue, const std::string& dateValue):
        versionMajor(versionMajorValue),
        versionMinor(versionMinorValue),
        versionMicro(versionMicroValue),
        date(dateValue)
{
}


bool operator==(const Version& lhs, const Version& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.versionMajor == rhs.versionMajor &&
        lhs.versionMinor == rhs.versionMinor &&
        lhs.versionMicro == rhs.versionMicro &&
        lhs.date == rhs.date
    ;
}

void Version::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> versionMajor;
    inputStream >> versionMinor;
    inputStream >> versionMicro;
    inputStream >> date;
}

void Version::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << versionMajor;
    outputStream << versionMinor;
    outputStream << versionMicro;
    outputStream << date;
}


Coordinate2D::Coordinate2D(const double& latitudeValue, const double& longitudeValue):
        latitude(latitudeValue),
        longitude(longitudeValue)
{
}


bool operator==(const Coordinate2D& lhs, const Coordinate2D& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.latitude == rhs.latitude &&
        lhs.longitude == rhs.longitude
    ;
}

void Coordinate2D::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> latitude;
    inputStream >> longitude;
}

void Coordinate2D::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << latitude;
    outputStream << longitude;
}

Coordinate3D::Coordinate3D(const double& latitudeValue, const double& longitudeValue, const int32_t& altitudeValue):
        Coordinate2D(latitudeValue, longitudeValue),
        altitude(altitudeValue)
{
}


bool operator==(const Coordinate3D& lhs, const Coordinate3D& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        static_cast<Coordinate3D::Coordinate2D>(lhs) == static_cast<Coordinate3D::Coordinate2D>(rhs) &&
        lhs.altitude == rhs.altitude
    ;
}

void Coordinate3D::readFromInputStream(CommonAPI::InputStream& inputStream) {
    Coordinate2D::readFromInputStream(inputStream);
    inputStream >> altitude;
}

void Coordinate3D::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    Coordinate2D::writeToOutputStream(outputStream);
    outputStream << altitude;
}



Rectangle::Rectangle(const Coordinate2D& topLeftValue, const Coordinate2D& bottomRightValue):
        topLeft(topLeftValue),
        bottomRight(bottomRightValue)
{
}


bool operator==(const Rectangle& lhs, const Rectangle& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.topLeft == rhs.topLeft &&
        lhs.bottomRight == rhs.bottomRight
    ;
}

void Rectangle::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> topLeft;
    inputStream >> bottomRight;
}

void Rectangle::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << topLeft;
    outputStream << bottomRight;
}






} // namespace NavigationTypes
} // namespace navigation
} // namespace genivi
} // namespace org
