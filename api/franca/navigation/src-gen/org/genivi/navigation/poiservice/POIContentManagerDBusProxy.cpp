/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * This interface offers methods that implement the POI search functionality of a
 *  navigation system.
 */
#include "POIContentManagerDBusProxy.h"

namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createPOIContentManagerDBusProxy(
                    const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection) {
    return std::make_shared<POIContentManagerDBusProxy>(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection);
}

INITIALIZER(registerPOIContentManagerDBusProxy) {
    CommonAPI::DBus::DBusFactory::registerProxyFactoryMethod(POIContentManager::getInterfaceId(),
       &createPOIContentManagerDBusProxy);
}

POIContentManagerDBusProxy::POIContentManagerDBusProxy(
                    const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyconnection):
        CommonAPI::DBus::DBusProxy(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyconnection)
,        configurationChanged_(*this, "ConfigurationChanged", "aq"),
        categoriesRemoved_(*this, "CategoriesRemoved", "au"),
        pOIAdded_(*this, "POIAdded", "au"),
        pOIRemoved_(*this, "POIRemoved", "au")
    {
    }


POIContentManagerDBusProxy::ConfigurationChangedEvent& POIContentManagerDBusProxy::getConfigurationChangedEvent() {
    return configurationChanged_;
}
POIContentManagerDBusProxy::CategoriesRemovedEvent& POIContentManagerDBusProxy::getCategoriesRemovedEvent() {
    return categoriesRemoved_;
}
POIContentManagerDBusProxy::POIAddedEvent& POIContentManagerDBusProxy::getPOIAddedEvent() {
    return pOIAdded_;
}
POIContentManagerDBusProxy::POIRemovedEvent& POIContentManagerDBusProxy::getPOIRemovedEvent() {
    return pOIRemoved_;
}

/**
 * This method returns the API version implemented by the content access module.
 */
void POIContentManagerDBusProxy::getVersion(CommonAPI::CallStatus& callStatus, NavigationTypes::Version& version) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<NavigationTypes::Version> >::callMethodWithReply(
        *this,
        "getVersion",
        "",
        callStatus
        , version);
}
std::future<CommonAPI::CallStatus> POIContentManagerDBusProxy::getVersionAsync(GetVersionAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<NavigationTypes::Version> >::callMethodAsync(
        *this,
        "getVersion",
        "",
        std::move(callback));
}
/**
 * Set the current language set for the search by poi provider module.
       
 *  The language defines the poi and categories name and details language. If the
 *  language is not supported, the default details will be returned in the native
 *  language.
 */
void POIContentManagerDBusProxy::setLocale(const std::string& languageCode, const std::string& countryCode, const std::string& scriptCode, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, std::string, std::string>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "setLocale",
        "sss",
        languageCode, countryCode, scriptCode,
        callStatus
        );
}
std::future<CommonAPI::CallStatus> POIContentManagerDBusProxy::setLocaleAsync(const std::string& languageCode, const std::string& countryCode, const std::string& scriptCode, SetLocaleAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, std::string, std::string>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "setLocale",
        "sss",
        languageCode, countryCode, scriptCode, 
        std::move(callback));
}
/**
 * Get the current language set for the search by poi provider module.
 */
void POIContentManagerDBusProxy::getLocale(CommonAPI::CallStatus& callStatus, std::string& languageCode, std::string& countryCode, std::string& scriptCode) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<std::string, std::string, std::string> >::callMethodWithReply(
        *this,
        "getLocale",
        "",
        callStatus
        , languageCode, countryCode, scriptCode);
}
std::future<CommonAPI::CallStatus> POIContentManagerDBusProxy::getLocaleAsync(GetLocaleAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<std::string, std::string, std::string> >::callMethodAsync(
        *this,
        "getLocale",
        "",
        std::move(callback));
}
/**
 * Get the supported set of locales for the search by poi provider module.
 */
void POIContentManagerDBusProxy::getSupportedLocales(CommonAPI::CallStatus& callStatus, std::vector<POIServiceTypes::Locales>& localeList) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<std::vector<POIServiceTypes::Locales>> >::callMethodWithReply(
        *this,
        "getSupportedLocales",
        "",
        callStatus
        , localeList);
}
std::future<CommonAPI::CallStatus> POIContentManagerDBusProxy::getSupportedLocalesAsync(GetSupportedLocalesAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<std::vector<POIServiceTypes::Locales>> >::callMethodAsync(
        *this,
        "getSupportedLocales",
        "",
        std::move(callback));
}
/**
 * This method retrieves the list od POI categories available (pre-defined and
 *  custom).
 */
void POIContentManagerDBusProxy::getAvailableCategories(CommonAPI::CallStatus& callStatus, std::vector<POIServiceTypes::CategoryAndName>& categories) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<std::vector<POIServiceTypes::CategoryAndName>> >::callMethodWithReply(
        *this,
        "getAvailableCategories",
        "",
        callStatus
        , categories);
}
std::future<CommonAPI::CallStatus> POIContentManagerDBusProxy::getAvailableCategoriesAsync(GetAvailableCategoriesAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<std::vector<POIServiceTypes::CategoryAndName>> >::callMethodAsync(
        *this,
        "getAvailableCategories",
        "",
        std::move(callback));
}
/**
 * Get the root category id. That would be ALL_CATEGORIES.
 */
void POIContentManagerDBusProxy::getRootCategory(CommonAPI::CallStatus& callStatus, POIServiceTypes::CategoryID& category) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<POIServiceTypes::CategoryID> >::callMethodWithReply(
        *this,
        "getRootCategory",
        "",
        callStatus
        , category);
}
std::future<CommonAPI::CallStatus> POIContentManagerDBusProxy::getRootCategoryAsync(GetRootCategoryAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<>,
                                     CommonAPI::DBus::DBusSerializableArguments<POIServiceTypes::CategoryID> >::callMethodAsync(
        *this,
        "getRootCategory",
        "",
        std::move(callback));
}
/**
 * Get the children categories id and type (top level) from the a parent unique id.
 */
void POIContentManagerDBusProxy::getChildrenCategories(const POIServiceTypes::CategoryID& category, CommonAPI::CallStatus& callStatus, std::vector<POIServiceTypes::CategoryAndLevel>& categories) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<POIServiceTypes::CategoryID>,
                                     CommonAPI::DBus::DBusSerializableArguments<std::vector<POIServiceTypes::CategoryAndLevel>> >::callMethodWithReply(
        *this,
        "getChildrenCategories",
        "u",
        category,
        callStatus
        , categories);
}
std::future<CommonAPI::CallStatus> POIContentManagerDBusProxy::getChildrenCategoriesAsync(const POIServiceTypes::CategoryID& category, GetChildrenCategoriesAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<POIServiceTypes::CategoryID>,
                                     CommonAPI::DBus::DBusSerializableArguments<std::vector<POIServiceTypes::CategoryAndLevel>> >::callMethodAsync(
        *this,
        "getChildrenCategories",
        "u",
        category, 
        std::move(callback));
}
/**
 * Get the parent categories id and type (top level) from the a unique id.
 */
void POIContentManagerDBusProxy::getParentCategories(const POIServiceTypes::CategoryID& category, CommonAPI::CallStatus& callStatus, std::vector<POIServiceTypes::CategoryAndLevel>& categories) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<POIServiceTypes::CategoryID>,
                                     CommonAPI::DBus::DBusSerializableArguments<std::vector<POIServiceTypes::CategoryAndLevel>> >::callMethodWithReply(
        *this,
        "getParentCategories",
        "u",
        category,
        callStatus
        , categories);
}
std::future<CommonAPI::CallStatus> POIContentManagerDBusProxy::getParentCategoriesAsync(const POIServiceTypes::CategoryID& category, GetParentCategoriesAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<POIServiceTypes::CategoryID>,
                                     CommonAPI::DBus::DBusSerializableArguments<std::vector<POIServiceTypes::CategoryAndLevel>> >::callMethodAsync(
        *this,
        "getParentCategories",
        "u",
        category, 
        std::move(callback));
}
/**
 * Creates a category by name and return an unique id.
 */
void POIContentManagerDBusProxy::createCategory(const POIServiceTypes::CAMCategory& category, CommonAPI::CallStatus& callStatus, POIServiceTypes::CategoryID& unique_id) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<POIServiceTypes::CAMCategory>,
                                     CommonAPI::DBus::DBusSerializableArguments<POIServiceTypes::CategoryID> >::callMethodWithReply(
        *this,
        "createCategory",
        "((au(yv)ss(yv))a(usia(is(yv)))a(us))",
        category,
        callStatus
        , unique_id);
}
std::future<CommonAPI::CallStatus> POIContentManagerDBusProxy::createCategoryAsync(const POIServiceTypes::CAMCategory& category, CreateCategoryAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<POIServiceTypes::CAMCategory>,
                                     CommonAPI::DBus::DBusSerializableArguments<POIServiceTypes::CategoryID> >::callMethodAsync(
        *this,
        "createCategory",
        "((au(yv)ss(yv))a(usia(is(yv)))a(us))",
        category, 
        std::move(callback));
}
/**
 * Removes a list of categories. Because of required time to remove it from the
 *  database, a signal is emitted when the deletion is done.
 */
void POIContentManagerDBusProxy::removeCategories(const std::vector<POIServiceTypes::CategoryID>& categories, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::vector<POIServiceTypes::CategoryID>>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "removeCategories",
        "au",
        categories,
        callStatus
        );
}
std::future<CommonAPI::CallStatus> POIContentManagerDBusProxy::removeCategoriesAsync(const std::vector<POIServiceTypes::CategoryID>& categories, RemoveCategoriesAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::vector<POIServiceTypes::CategoryID>>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "removeCategories",
        "au",
        categories, 
        std::move(callback));
}
/**
 * Adds a list of POIs to a category. Because of required time to add it to the
 *  database, a signal is emitted when the update is done, that gives the id of
 *  the elements added
 */
void POIContentManagerDBusProxy::addPOIs(const POIServiceTypes::CategoryID& unique_id, const std::vector<POIServiceTypes::PoiAddedDetails>& poiList, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<POIServiceTypes::CategoryID, std::vector<POIServiceTypes::PoiAddedDetails>>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "addPOIs",
        "ua(s(ddi)a(ui(yv)))",
        unique_id, poiList,
        callStatus
        );
}
std::future<CommonAPI::CallStatus> POIContentManagerDBusProxy::addPOIsAsync(const POIServiceTypes::CategoryID& unique_id, const std::vector<POIServiceTypes::PoiAddedDetails>& poiList, AddPOIsAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<POIServiceTypes::CategoryID, std::vector<POIServiceTypes::PoiAddedDetails>>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "addPOIs",
        "ua(s(ddi)a(ui(yv)))",
        unique_id, poiList, 
        std::move(callback));
}
/**
 * Removes a list of POIs to a category. Because of required time to remove it
 *  from the database, a signal is emitted when the update is done.
 */
void POIContentManagerDBusProxy::removePOIs(const std::vector<POIServiceTypes::POI_ID>& ids, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::vector<POIServiceTypes::POI_ID>>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "removePOIs",
        "au",
        ids,
        callStatus
        );
}
std::future<CommonAPI::CallStatus> POIContentManagerDBusProxy::removePOIsAsync(const std::vector<POIServiceTypes::POI_ID>& ids, RemovePOIsAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::vector<POIServiceTypes::POI_ID>>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "removePOIs",
        "au",
        ids, 
        std::move(callback));
}
/**
 * This method is sent by the POI service component to inform all the CAM that a
 *  new POI search was started.
        It provides all the relevant search
 *  parameters. Of course the CAM will only be aware of the search if it registers
 *  one of the search categories.
 */
void POIContentManagerDBusProxy::poiSearchStarted(const NavigationTypes::Handle& poiSearchHandle, const uint16_t& maxSize, const NavigationTypes::Coordinate3D& location, const std::vector<POIServiceTypes::CategoryAndRadius>& poiCategories, const std::vector<POIServiceTypes::AttributeDetails>& poiAttributes, const std::string& inputString, const uint16_t& sortOption, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<NavigationTypes::Handle, uint16_t, NavigationTypes::Coordinate3D, std::vector<POIServiceTypes::CategoryAndRadius>, std::vector<POIServiceTypes::AttributeDetails>, std::string, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "poiSearchStarted",
        "uq(ddi)a(uu)a(uui(yv)ib)sq",
        poiSearchHandle, maxSize, location, poiCategories, poiAttributes, inputString, sortOption,
        callStatus
        );
}
std::future<CommonAPI::CallStatus> POIContentManagerDBusProxy::poiSearchStartedAsync(const NavigationTypes::Handle& poiSearchHandle, const uint16_t& maxSize, const NavigationTypes::Coordinate3D& location, const std::vector<POIServiceTypes::CategoryAndRadius>& poiCategories, const std::vector<POIServiceTypes::AttributeDetails>& poiAttributes, const std::string& inputString, const uint16_t& sortOption, PoiSearchStartedAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<NavigationTypes::Handle, uint16_t, NavigationTypes::Coordinate3D, std::vector<POIServiceTypes::CategoryAndRadius>, std::vector<POIServiceTypes::AttributeDetails>, std::string, uint16_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "poiSearchStarted",
        "uq(ddi)a(uu)a(uui(yv)ib)sq",
        poiSearchHandle, maxSize, location, poiCategories, poiAttributes, inputString, sortOption, 
        std::move(callback));
}
/**
 * This method cancels the search for the current id.
 */
void POIContentManagerDBusProxy::poiSearchCanceled(const NavigationTypes::Handle& poiSearchHandle, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<NavigationTypes::Handle>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "poiSearchCanceled",
        "u",
        poiSearchHandle,
        callStatus
        );
}
std::future<CommonAPI::CallStatus> POIContentManagerDBusProxy::poiSearchCanceledAsync(const NavigationTypes::Handle& poiSearchHandle, PoiSearchCanceledAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<NavigationTypes::Handle>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "poiSearchCanceled",
        "u",
        poiSearchHandle, 
        std::move(callback));
}
/**
 * This method provides the poi results list found by the CAM.
        As the POI
 *  unique id is managed by the POI component, the CAM only provides the POI name,
 *  the category and coordinates as well as all the relevant detailed information.
 */
void POIContentManagerDBusProxy::resultListRequested(const uint8_t& camId, const NavigationTypes::Handle& poiSearchHandle, const std::vector<POIServiceTypes::AttributeID>& attributes, CommonAPI::CallStatus& callStatus, POIServiceTypes::SearchStatusState& statusValue, uint16_t& resultListSize, std::vector<POIServiceTypes::PoiCAMDetails>& resultList) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint8_t, NavigationTypes::Handle, std::vector<POIServiceTypes::AttributeID>>,
                                     CommonAPI::DBus::DBusSerializableArguments<POIServiceTypes::SearchStatusState, uint16_t, std::vector<POIServiceTypes::PoiCAMDetails>> >::callMethodWithReply(
        *this,
        "resultListRequested",
        "yuau",
        camId, poiSearchHandle, attributes,
        callStatus
        , statusValue, resultListSize, resultList);
}
std::future<CommonAPI::CallStatus> POIContentManagerDBusProxy::resultListRequestedAsync(const uint8_t& camId, const NavigationTypes::Handle& poiSearchHandle, const std::vector<POIServiceTypes::AttributeID>& attributes, ResultListRequestedAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint8_t, NavigationTypes::Handle, std::vector<POIServiceTypes::AttributeID>>,
                                     CommonAPI::DBus::DBusSerializableArguments<POIServiceTypes::SearchStatusState, uint16_t, std::vector<POIServiceTypes::PoiCAMDetails>> >::callMethodAsync(
        *this,
        "resultListRequested",
        "yuau",
        camId, poiSearchHandle, attributes, 
        std::move(callback));
}
/**
 * This method retrieves the details associated to one or more POI.
        It
 *  contains the name, the parent categories, the list of attributes, the icons,
 *  ... .
 */
void POIContentManagerDBusProxy::poiDetailsRequested(const std::vector<POIServiceTypes::POI_ID>& source_id, CommonAPI::CallStatus& callStatus, std::vector<POIServiceTypes::SearchResultDetails>& results) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::vector<POIServiceTypes::POI_ID>>,
                                     CommonAPI::DBus::DBusSerializableArguments<std::vector<POIServiceTypes::SearchResultDetails>> >::callMethodWithReply(
        *this,
        "poiDetailsRequested",
        "au",
        source_id,
        callStatus
        , results);
}
std::future<CommonAPI::CallStatus> POIContentManagerDBusProxy::poiDetailsRequestedAsync(const std::vector<POIServiceTypes::POI_ID>& source_id, PoiDetailsRequestedAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::vector<POIServiceTypes::POI_ID>>,
                                     CommonAPI::DBus::DBusSerializableArguments<std::vector<POIServiceTypes::SearchResultDetails>> >::callMethodAsync(
        *this,
        "poiDetailsRequested",
        "au",
        source_id, 
        std::move(callback));
}



void POIContentManagerDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org
