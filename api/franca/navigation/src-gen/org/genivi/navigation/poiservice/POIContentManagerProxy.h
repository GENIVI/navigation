/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * This interface offers methods that implement the POI search functionality of a
 *  navigation system.
 */
#ifndef ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Manager_PROXY_H_
#define ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Manager_PROXY_H_

#include "POIContentManagerProxyBase.h"


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

template <typename ... _AttributeExtensions>
class POIContentManagerProxy: virtual public POIContentManager, virtual public POIContentManagerProxyBase
, public _AttributeExtensions... {
public:
    POIContentManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~POIContentManagerProxy();

    typedef POIContentManager InterfaceType;



    /**
     * guidanceStatusChanged = This signal is sent to the clients when one or more
     *  configuration settings changes.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast ConfigurationChanged.
     */
    virtual ConfigurationChangedEvent& getConfigurationChangedEvent() {
        return delegate_->getConfigurationChangedEvent();
    }
    /**
     * CategoriesRemoved = This signal is emitted when a list of categories and
     *  associated content has been removed from the database.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast CategoriesRemoved.
     */
    virtual CategoriesRemovedEvent& getCategoriesRemovedEvent() {
        return delegate_->getCategoriesRemovedEvent();
    }
    /**
     * POIAdded = This signal is emitted when a list of POIs and associated content
     *  has been added to the database. It returns the ids.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast POIAdded.
     */
    virtual POIAddedEvent& getPOIAddedEvent() {
        return delegate_->getPOIAddedEvent();
    }
    /**
     * POIRemoved = This signal is emitted when a list of POIs and associated content
     *  has been removed from the database.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast POIRemoved.
     */
    virtual POIRemovedEvent& getPOIRemovedEvent() {
        return delegate_->getPOIRemovedEvent();
    }

    /**
     * This method returns the API version implemented by the content access module.
     * 
     * Calls getVersion with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getVersion(CommonAPI::CallStatus& callStatus, NavigationTypes::Version& version);
    /**
     * Calls getVersion with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(GetVersionAsyncCallback callback);
    /**
     * Set the current language set for the search by poi provider module.
           
     *  The language defines the poi and categories name and details language. If the
     *  language is not supported, the default details will be returned in the native
     *  language.
     * 
     * Calls setLocale with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setLocale(const std::string& languageCode, const std::string& countryCode, const std::string& scriptCode, CommonAPI::CallStatus& callStatus);
    /**
     * Calls setLocale with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setLocaleAsync(const std::string& languageCode, const std::string& countryCode, const std::string& scriptCode, SetLocaleAsyncCallback callback);
    /**
     * Get the current language set for the search by poi provider module.
     * 
     * Calls getLocale with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getLocale(CommonAPI::CallStatus& callStatus, std::string& languageCode, std::string& countryCode, std::string& scriptCode);
    /**
     * Calls getLocale with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getLocaleAsync(GetLocaleAsyncCallback callback);
    /**
     * Get the supported set of locales for the search by poi provider module.
     * 
     * Calls getSupportedLocales with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getSupportedLocales(CommonAPI::CallStatus& callStatus, std::vector<POIServiceTypes::Locales>& localeList);
    /**
     * Calls getSupportedLocales with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getSupportedLocalesAsync(GetSupportedLocalesAsyncCallback callback);
    /**
     * This method retrieves the list od POI categories available (pre-defined and
     *  custom).
     * 
     * Calls getAvailableCategories with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getAvailableCategories(CommonAPI::CallStatus& callStatus, std::vector<POIServiceTypes::CategoryAndName>& categories);
    /**
     * Calls getAvailableCategories with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getAvailableCategoriesAsync(GetAvailableCategoriesAsyncCallback callback);
    /**
     * Get the root category id. That would be ALL_CATEGORIES.
     * 
     * Calls getRootCategory with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getRootCategory(CommonAPI::CallStatus& callStatus, POIServiceTypes::CategoryID& category);
    /**
     * Calls getRootCategory with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getRootCategoryAsync(GetRootCategoryAsyncCallback callback);
    /**
     * Get the children categories id and type (top level) from the a parent unique id.
     * 
     * Calls getChildrenCategories with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getChildrenCategories(const POIServiceTypes::CategoryID& category, CommonAPI::CallStatus& callStatus, std::vector<POIServiceTypes::CategoryAndLevel>& categories);
    /**
     * Calls getChildrenCategories with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getChildrenCategoriesAsync(const POIServiceTypes::CategoryID& category, GetChildrenCategoriesAsyncCallback callback);
    /**
     * Get the parent categories id and type (top level) from the a unique id.
     * 
     * Calls getParentCategories with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getParentCategories(const POIServiceTypes::CategoryID& category, CommonAPI::CallStatus& callStatus, std::vector<POIServiceTypes::CategoryAndLevel>& categories);
    /**
     * Calls getParentCategories with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getParentCategoriesAsync(const POIServiceTypes::CategoryID& category, GetParentCategoriesAsyncCallback callback);
    /**
     * Creates a category by name and return an unique id.
     * 
     * Calls createCategory with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void createCategory(const POIServiceTypes::CAMCategory& category, CommonAPI::CallStatus& callStatus, POIServiceTypes::CategoryID& unique_id);
    /**
     * Calls createCategory with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> createCategoryAsync(const POIServiceTypes::CAMCategory& category, CreateCategoryAsyncCallback callback);
    /**
     * Removes a list of categories. Because of required time to remove it from the
     *  database, a signal is emitted when the deletion is done.
     * 
     * Calls removeCategories with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void removeCategories(const std::vector<POIServiceTypes::CategoryID>& categories, CommonAPI::CallStatus& callStatus);
    /**
     * Calls removeCategories with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> removeCategoriesAsync(const std::vector<POIServiceTypes::CategoryID>& categories, RemoveCategoriesAsyncCallback callback);
    /**
     * Adds a list of POIs to a category. Because of required time to add it to the
     *  database, a signal is emitted when the update is done, that gives the id of
     *  the elements added
     * 
     * Calls addPOIs with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void addPOIs(const POIServiceTypes::CategoryID& unique_id, const std::vector<POIServiceTypes::PoiAddedDetails>& poiList, CommonAPI::CallStatus& callStatus);
    /**
     * Calls addPOIs with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> addPOIsAsync(const POIServiceTypes::CategoryID& unique_id, const std::vector<POIServiceTypes::PoiAddedDetails>& poiList, AddPOIsAsyncCallback callback);
    /**
     * Removes a list of POIs to a category. Because of required time to remove it
     *  from the database, a signal is emitted when the update is done.
     * 
     * Calls removePOIs with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void removePOIs(const std::vector<POIServiceTypes::POI_ID>& ids, CommonAPI::CallStatus& callStatus);
    /**
     * Calls removePOIs with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> removePOIsAsync(const std::vector<POIServiceTypes::POI_ID>& ids, RemovePOIsAsyncCallback callback);
    /**
     * This method is sent by the POI service component to inform all the CAM that a
     *  new POI search was started.
            It provides all the relevant search
     *  parameters. Of course the CAM will only be aware of the search if it registers
     *  one of the search categories.
     * 
     * Calls poiSearchStarted with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void poiSearchStarted(const NavigationTypes::Handle& poiSearchHandle, const uint16_t& maxSize, const NavigationTypes::Coordinate3D& location, const std::vector<POIServiceTypes::CategoryAndRadius>& poiCategories, const std::vector<POIServiceTypes::AttributeDetails>& poiAttributes, const std::string& inputString, const uint16_t& sortOption, CommonAPI::CallStatus& callStatus);
    /**
     * Calls poiSearchStarted with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> poiSearchStartedAsync(const NavigationTypes::Handle& poiSearchHandle, const uint16_t& maxSize, const NavigationTypes::Coordinate3D& location, const std::vector<POIServiceTypes::CategoryAndRadius>& poiCategories, const std::vector<POIServiceTypes::AttributeDetails>& poiAttributes, const std::string& inputString, const uint16_t& sortOption, PoiSearchStartedAsyncCallback callback);
    /**
     * This method cancels the search for the current id.
     * 
     * Calls poiSearchCanceled with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void poiSearchCanceled(const NavigationTypes::Handle& poiSearchHandle, CommonAPI::CallStatus& callStatus);
    /**
     * Calls poiSearchCanceled with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> poiSearchCanceledAsync(const NavigationTypes::Handle& poiSearchHandle, PoiSearchCanceledAsyncCallback callback);
    /**
     * This method provides the poi results list found by the CAM.
            As the POI
     *  unique id is managed by the POI component, the CAM only provides the POI name,
     *  the category and coordinates as well as all the relevant detailed information.
     * 
     * Calls resultListRequested with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void resultListRequested(const uint8_t& camId, const NavigationTypes::Handle& poiSearchHandle, const std::vector<POIServiceTypes::AttributeID>& attributes, CommonAPI::CallStatus& callStatus, POIServiceTypes::SearchStatusState& statusValue, uint16_t& resultListSize, std::vector<POIServiceTypes::PoiCAMDetails>& resultList);
    /**
     * Calls resultListRequested with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> resultListRequestedAsync(const uint8_t& camId, const NavigationTypes::Handle& poiSearchHandle, const std::vector<POIServiceTypes::AttributeID>& attributes, ResultListRequestedAsyncCallback callback);
    /**
     * This method retrieves the details associated to one or more POI.
            It
     *  contains the name, the parent categories, the list of attributes, the icons,
     *  ... .
     * 
     * Calls poiDetailsRequested with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void poiDetailsRequested(const std::vector<POIServiceTypes::POI_ID>& source_id, CommonAPI::CallStatus& callStatus, std::vector<POIServiceTypes::SearchResultDetails>& results);
    /**
     * Calls poiDetailsRequested with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> poiDetailsRequestedAsync(const std::vector<POIServiceTypes::POI_ID>& source_id, PoiDetailsRequestedAsyncCallback callback);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual std::string getAddress() const;

    /**
     * Returns the domain of the remote partner this proxy communicates with.
     */
    virtual const std::string& getDomain() const;

    /** 
     * Returns the service ID of the remote partner this proxy communicates with.
     */
    virtual const std::string& getServiceId() const;

    /**
     * Returns the instance ID of the remote partner this proxy communicates with.
     */
    virtual const std::string& getInstanceId() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<POIContentManagerProxyBase> delegate_;
};

#ifdef WIN32
    typedef POIContentManagerProxy<CommonAPI::WINDummyAttributeExtension<CommonAPI::WINDummyAttribute>> POIContentManagerProxyDefault;
#else
    typedef POIContentManagerProxy<> POIContentManagerProxyDefault;
#endif


//
// POIContentManagerProxy Implementation
//
template <typename ... _AttributeExtensions>
POIContentManagerProxy<_AttributeExtensions...>::POIContentManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<POIContentManagerProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<POIContentManagerProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
POIContentManagerProxy<_AttributeExtensions...>::~POIContentManagerProxy() {
}

/**
 * This method returns the API version implemented by the content access module.
 */
template <typename ... _AttributeExtensions>
void POIContentManagerProxy<_AttributeExtensions...>::getVersion(CommonAPI::CallStatus& callStatus, NavigationTypes::Version& version) {
    delegate_->getVersion(callStatus, version);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentManagerProxy<_AttributeExtensions...>::getVersionAsync(GetVersionAsyncCallback callback) {
    return delegate_->getVersionAsync(callback);
}
/**
 * Set the current language set for the search by poi provider module.
       
 *  The language defines the poi and categories name and details language. If the
 *  language is not supported, the default details will be returned in the native
 *  language.
 */
template <typename ... _AttributeExtensions>
void POIContentManagerProxy<_AttributeExtensions...>::setLocale(const std::string& languageCode, const std::string& countryCode, const std::string& scriptCode, CommonAPI::CallStatus& callStatus) {
    delegate_->setLocale(languageCode, countryCode, scriptCode, callStatus);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentManagerProxy<_AttributeExtensions...>::setLocaleAsync(const std::string& languageCode, const std::string& countryCode, const std::string& scriptCode, SetLocaleAsyncCallback callback) {
    return delegate_->setLocaleAsync(languageCode, countryCode, scriptCode, callback);
}
/**
 * Get the current language set for the search by poi provider module.
 */
template <typename ... _AttributeExtensions>
void POIContentManagerProxy<_AttributeExtensions...>::getLocale(CommonAPI::CallStatus& callStatus, std::string& languageCode, std::string& countryCode, std::string& scriptCode) {
    delegate_->getLocale(callStatus, languageCode, countryCode, scriptCode);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentManagerProxy<_AttributeExtensions...>::getLocaleAsync(GetLocaleAsyncCallback callback) {
    return delegate_->getLocaleAsync(callback);
}
/**
 * Get the supported set of locales for the search by poi provider module.
 */
template <typename ... _AttributeExtensions>
void POIContentManagerProxy<_AttributeExtensions...>::getSupportedLocales(CommonAPI::CallStatus& callStatus, std::vector<POIServiceTypes::Locales>& localeList) {
    delegate_->getSupportedLocales(callStatus, localeList);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentManagerProxy<_AttributeExtensions...>::getSupportedLocalesAsync(GetSupportedLocalesAsyncCallback callback) {
    return delegate_->getSupportedLocalesAsync(callback);
}
/**
 * This method retrieves the list od POI categories available (pre-defined and
 *  custom).
 */
template <typename ... _AttributeExtensions>
void POIContentManagerProxy<_AttributeExtensions...>::getAvailableCategories(CommonAPI::CallStatus& callStatus, std::vector<POIServiceTypes::CategoryAndName>& categories) {
    delegate_->getAvailableCategories(callStatus, categories);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentManagerProxy<_AttributeExtensions...>::getAvailableCategoriesAsync(GetAvailableCategoriesAsyncCallback callback) {
    return delegate_->getAvailableCategoriesAsync(callback);
}
/**
 * Get the root category id. That would be ALL_CATEGORIES.
 */
template <typename ... _AttributeExtensions>
void POIContentManagerProxy<_AttributeExtensions...>::getRootCategory(CommonAPI::CallStatus& callStatus, POIServiceTypes::CategoryID& category) {
    delegate_->getRootCategory(callStatus, category);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentManagerProxy<_AttributeExtensions...>::getRootCategoryAsync(GetRootCategoryAsyncCallback callback) {
    return delegate_->getRootCategoryAsync(callback);
}
/**
 * Get the children categories id and type (top level) from the a parent unique id.
 */
template <typename ... _AttributeExtensions>
void POIContentManagerProxy<_AttributeExtensions...>::getChildrenCategories(const POIServiceTypes::CategoryID& category, CommonAPI::CallStatus& callStatus, std::vector<POIServiceTypes::CategoryAndLevel>& categories) {
    delegate_->getChildrenCategories(category, callStatus, categories);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentManagerProxy<_AttributeExtensions...>::getChildrenCategoriesAsync(const POIServiceTypes::CategoryID& category, GetChildrenCategoriesAsyncCallback callback) {
    return delegate_->getChildrenCategoriesAsync(category, callback);
}
/**
 * Get the parent categories id and type (top level) from the a unique id.
 */
template <typename ... _AttributeExtensions>
void POIContentManagerProxy<_AttributeExtensions...>::getParentCategories(const POIServiceTypes::CategoryID& category, CommonAPI::CallStatus& callStatus, std::vector<POIServiceTypes::CategoryAndLevel>& categories) {
    delegate_->getParentCategories(category, callStatus, categories);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentManagerProxy<_AttributeExtensions...>::getParentCategoriesAsync(const POIServiceTypes::CategoryID& category, GetParentCategoriesAsyncCallback callback) {
    return delegate_->getParentCategoriesAsync(category, callback);
}
/**
 * Creates a category by name and return an unique id.
 */
template <typename ... _AttributeExtensions>
void POIContentManagerProxy<_AttributeExtensions...>::createCategory(const POIServiceTypes::CAMCategory& category, CommonAPI::CallStatus& callStatus, POIServiceTypes::CategoryID& unique_id) {
    delegate_->createCategory(category, callStatus, unique_id);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentManagerProxy<_AttributeExtensions...>::createCategoryAsync(const POIServiceTypes::CAMCategory& category, CreateCategoryAsyncCallback callback) {
    return delegate_->createCategoryAsync(category, callback);
}
/**
 * Removes a list of categories. Because of required time to remove it from the
 *  database, a signal is emitted when the deletion is done.
 */
template <typename ... _AttributeExtensions>
void POIContentManagerProxy<_AttributeExtensions...>::removeCategories(const std::vector<POIServiceTypes::CategoryID>& categories, CommonAPI::CallStatus& callStatus) {
    delegate_->removeCategories(categories, callStatus);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentManagerProxy<_AttributeExtensions...>::removeCategoriesAsync(const std::vector<POIServiceTypes::CategoryID>& categories, RemoveCategoriesAsyncCallback callback) {
    return delegate_->removeCategoriesAsync(categories, callback);
}
/**
 * Adds a list of POIs to a category. Because of required time to add it to the
 *  database, a signal is emitted when the update is done, that gives the id of
 *  the elements added
 */
template <typename ... _AttributeExtensions>
void POIContentManagerProxy<_AttributeExtensions...>::addPOIs(const POIServiceTypes::CategoryID& unique_id, const std::vector<POIServiceTypes::PoiAddedDetails>& poiList, CommonAPI::CallStatus& callStatus) {
    delegate_->addPOIs(unique_id, poiList, callStatus);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentManagerProxy<_AttributeExtensions...>::addPOIsAsync(const POIServiceTypes::CategoryID& unique_id, const std::vector<POIServiceTypes::PoiAddedDetails>& poiList, AddPOIsAsyncCallback callback) {
    return delegate_->addPOIsAsync(unique_id, poiList, callback);
}
/**
 * Removes a list of POIs to a category. Because of required time to remove it
 *  from the database, a signal is emitted when the update is done.
 */
template <typename ... _AttributeExtensions>
void POIContentManagerProxy<_AttributeExtensions...>::removePOIs(const std::vector<POIServiceTypes::POI_ID>& ids, CommonAPI::CallStatus& callStatus) {
    delegate_->removePOIs(ids, callStatus);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentManagerProxy<_AttributeExtensions...>::removePOIsAsync(const std::vector<POIServiceTypes::POI_ID>& ids, RemovePOIsAsyncCallback callback) {
    return delegate_->removePOIsAsync(ids, callback);
}
/**
 * This method is sent by the POI service component to inform all the CAM that a
 *  new POI search was started.
        It provides all the relevant search
 *  parameters. Of course the CAM will only be aware of the search if it registers
 *  one of the search categories.
 */
template <typename ... _AttributeExtensions>
void POIContentManagerProxy<_AttributeExtensions...>::poiSearchStarted(const NavigationTypes::Handle& poiSearchHandle, const uint16_t& maxSize, const NavigationTypes::Coordinate3D& location, const std::vector<POIServiceTypes::CategoryAndRadius>& poiCategories, const std::vector<POIServiceTypes::AttributeDetails>& poiAttributes, const std::string& inputString, const uint16_t& sortOption, CommonAPI::CallStatus& callStatus) {
    delegate_->poiSearchStarted(poiSearchHandle, maxSize, location, poiCategories, poiAttributes, inputString, sortOption, callStatus);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentManagerProxy<_AttributeExtensions...>::poiSearchStartedAsync(const NavigationTypes::Handle& poiSearchHandle, const uint16_t& maxSize, const NavigationTypes::Coordinate3D& location, const std::vector<POIServiceTypes::CategoryAndRadius>& poiCategories, const std::vector<POIServiceTypes::AttributeDetails>& poiAttributes, const std::string& inputString, const uint16_t& sortOption, PoiSearchStartedAsyncCallback callback) {
    return delegate_->poiSearchStartedAsync(poiSearchHandle, maxSize, location, poiCategories, poiAttributes, inputString, sortOption, callback);
}
/**
 * This method cancels the search for the current id.
 */
template <typename ... _AttributeExtensions>
void POIContentManagerProxy<_AttributeExtensions...>::poiSearchCanceled(const NavigationTypes::Handle& poiSearchHandle, CommonAPI::CallStatus& callStatus) {
    delegate_->poiSearchCanceled(poiSearchHandle, callStatus);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentManagerProxy<_AttributeExtensions...>::poiSearchCanceledAsync(const NavigationTypes::Handle& poiSearchHandle, PoiSearchCanceledAsyncCallback callback) {
    return delegate_->poiSearchCanceledAsync(poiSearchHandle, callback);
}
/**
 * This method provides the poi results list found by the CAM.
        As the POI
 *  unique id is managed by the POI component, the CAM only provides the POI name,
 *  the category and coordinates as well as all the relevant detailed information.
 */
template <typename ... _AttributeExtensions>
void POIContentManagerProxy<_AttributeExtensions...>::resultListRequested(const uint8_t& camId, const NavigationTypes::Handle& poiSearchHandle, const std::vector<POIServiceTypes::AttributeID>& attributes, CommonAPI::CallStatus& callStatus, POIServiceTypes::SearchStatusState& statusValue, uint16_t& resultListSize, std::vector<POIServiceTypes::PoiCAMDetails>& resultList) {
    delegate_->resultListRequested(camId, poiSearchHandle, attributes, callStatus, statusValue, resultListSize, resultList);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentManagerProxy<_AttributeExtensions...>::resultListRequestedAsync(const uint8_t& camId, const NavigationTypes::Handle& poiSearchHandle, const std::vector<POIServiceTypes::AttributeID>& attributes, ResultListRequestedAsyncCallback callback) {
    return delegate_->resultListRequestedAsync(camId, poiSearchHandle, attributes, callback);
}
/**
 * This method retrieves the details associated to one or more POI.
        It
 *  contains the name, the parent categories, the list of attributes, the icons,
 *  ... .
 */
template <typename ... _AttributeExtensions>
void POIContentManagerProxy<_AttributeExtensions...>::poiDetailsRequested(const std::vector<POIServiceTypes::POI_ID>& source_id, CommonAPI::CallStatus& callStatus, std::vector<POIServiceTypes::SearchResultDetails>& results) {
    delegate_->poiDetailsRequested(source_id, callStatus, results);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentManagerProxy<_AttributeExtensions...>::poiDetailsRequestedAsync(const std::vector<POIServiceTypes::POI_ID>& source_id, PoiDetailsRequestedAsyncCallback callback) {
    return delegate_->poiDetailsRequestedAsync(source_id, callback);
}

template <typename ... _AttributeExtensions>
std::string POIContentManagerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
const std::string& POIContentManagerProxy<_AttributeExtensions...>::getDomain() const {
    return delegate_->getDomain();
}

template <typename ... _AttributeExtensions>
const std::string& POIContentManagerProxy<_AttributeExtensions...>::getServiceId() const {
    return delegate_->getServiceId();
}

template <typename ... _AttributeExtensions>
const std::string& POIContentManagerProxy<_AttributeExtensions...>::getInstanceId() const {
    return delegate_->getInstanceId();
}

template <typename ... _AttributeExtensions>
bool POIContentManagerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool POIContentManagerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& POIContentManagerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& POIContentManagerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org


#endif // ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Manager_PROXY_H_
