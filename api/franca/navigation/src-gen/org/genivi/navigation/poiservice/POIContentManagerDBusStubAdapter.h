/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * This interface offers methods that implement the POI search functionality of a
 *  navigation system.
 */
#ifndef ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Manager_DBUS_STUB_ADAPTER_H_
#define ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Manager_DBUS_STUB_ADAPTER_H_

#include <org/genivi/navigation/poiservice/POIContentManagerStub.h>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusStubAdapterHelper.h>
#include <CommonAPI/DBus/DBusStubAdapter.h>
#include <CommonAPI/DBus/DBusFactory.h>
#include <CommonAPI/DBus/DBusServicePublisher.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

typedef CommonAPI::DBus::DBusStubAdapterHelper<POIContentManagerStub> POIContentManagerDBusStubAdapterHelper;

class POIContentManagerDBusStubAdapterInternal: public virtual POIContentManagerStubAdapter, public POIContentManagerDBusStubAdapterHelper {
 public:
    POIContentManagerDBusStubAdapterInternal(
            const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
            const std::string& commonApiAddress,
            const std::string& dbusInterfaceName,
            const std::string& dbusBusName,
            const std::string& dbusObjectPath,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
            const std::shared_ptr<CommonAPI::StubBase>& stub);

    ~POIContentManagerDBusStubAdapterInternal();

    virtual const bool hasFreedesktopProperties();


    /**
     * guidanceStatusChanged = This signal is sent to the clients when one or more
     *  configuration settings changes.
     */
    void fireConfigurationChangedEvent(const std::vector<uint16_t>& changedSettings);
    /**
     * CategoriesRemoved = This signal is emitted when a list of categories and
     *  associated content has been removed from the database.
     */
    void fireCategoriesRemovedEvent(const std::vector<POIServiceTypes::CategoryID>& categories);
    /**
     * POIAdded = This signal is emitted when a list of POIs and associated content
     *  has been added to the database. It returns the ids.
     */
    void firePOIAddedEvent(const std::vector<POIServiceTypes::POI_ID>& pois);
    /**
     * POIRemoved = This signal is emitted when a list of POIs and associated content
     *  has been removed from the database.
     */
    void firePOIRemovedEvent(const std::vector<POIServiceTypes::POI_ID>& pois);


    const POIContentManagerDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();


static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        POIContentManagerStub,
        CommonAPI::Version
        > getPOIContentManagerInterfaceVersionStubDispatcher;



/**
 * This method returns the API version implemented by the content access module.
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    POIContentManagerStub,
    std::tuple<>,
    std::tuple<NavigationTypes::Version>
    > getVersionStubDispatcher;
/**
 * Set the current language set for the search by poi provider module.
       
 *  The language defines the poi and categories name and details language. If the
 *  language is not supported, the default details will be returned in the native
 *  language.
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    POIContentManagerStub,
    std::tuple<std::string, std::string, std::string>,
    std::tuple<>
    > setLocaleStubDispatcher;
/**
 * Get the current language set for the search by poi provider module.
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    POIContentManagerStub,
    std::tuple<>,
    std::tuple<std::string, std::string, std::string>
    > getLocaleStubDispatcher;
/**
 * Get the supported set of locales for the search by poi provider module.
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    POIContentManagerStub,
    std::tuple<>,
    std::tuple<std::vector<POIServiceTypes::Locales>>
    > getSupportedLocalesStubDispatcher;
/**
 * This method retrieves the list od POI categories available (pre-defined and
 *  custom).
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    POIContentManagerStub,
    std::tuple<>,
    std::tuple<std::vector<POIServiceTypes::CategoryAndName>>
    > getAvailableCategoriesStubDispatcher;
/**
 * Get the root category id. That would be ALL_CATEGORIES.
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    POIContentManagerStub,
    std::tuple<>,
    std::tuple<POIServiceTypes::CategoryID>
    > getRootCategoryStubDispatcher;
/**
 * Get the children categories id and type (top level) from the a parent unique id.
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    POIContentManagerStub,
    std::tuple<POIServiceTypes::CategoryID>,
    std::tuple<std::vector<POIServiceTypes::CategoryAndLevel>>
    > getChildrenCategoriesStubDispatcher;
/**
 * Get the parent categories id and type (top level) from the a unique id.
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    POIContentManagerStub,
    std::tuple<POIServiceTypes::CategoryID>,
    std::tuple<std::vector<POIServiceTypes::CategoryAndLevel>>
    > getParentCategoriesStubDispatcher;
/**
 * Creates a category by name and return an unique id.
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    POIContentManagerStub,
    std::tuple<POIServiceTypes::CAMCategory>,
    std::tuple<POIServiceTypes::CategoryID>
    > createCategoryStubDispatcher;
/**
 * Removes a list of categories. Because of required time to remove it from the
 *  database, a signal is emitted when the deletion is done.
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    POIContentManagerStub,
    std::tuple<std::vector<POIServiceTypes::CategoryID>>,
    std::tuple<>
    > removeCategoriesStubDispatcher;
/**
 * Adds a list of POIs to a category. Because of required time to add it to the
 *  database, a signal is emitted when the update is done, that gives the id of
 *  the elements added
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    POIContentManagerStub,
    std::tuple<POIServiceTypes::CategoryID, std::vector<POIServiceTypes::PoiAddedDetails>>,
    std::tuple<>
    > addPOIsStubDispatcher;
/**
 * Removes a list of POIs to a category. Because of required time to remove it
 *  from the database, a signal is emitted when the update is done.
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    POIContentManagerStub,
    std::tuple<std::vector<POIServiceTypes::POI_ID>>,
    std::tuple<>
    > removePOIsStubDispatcher;
/**
 * This method is sent by the POI service component to inform all the CAM that a
 *  new POI search was started.
        It provides all the relevant search
 *  parameters. Of course the CAM will only be aware of the search if it registers
 *  one of the search categories.
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    POIContentManagerStub,
    std::tuple<NavigationTypes::Handle, uint16_t, NavigationTypes::Coordinate3D, std::vector<POIServiceTypes::CategoryAndRadius>, std::vector<POIServiceTypes::AttributeDetails>, std::string, uint16_t>,
    std::tuple<>
    > poiSearchStartedStubDispatcher;
/**
 * This method cancels the search for the current id.
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    POIContentManagerStub,
    std::tuple<NavigationTypes::Handle>,
    std::tuple<>
    > poiSearchCanceledStubDispatcher;
/**
 * This method provides the poi results list found by the CAM.
        As the POI
 *  unique id is managed by the POI component, the CAM only provides the POI name,
 *  the category and coordinates as well as all the relevant detailed information.
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    POIContentManagerStub,
    std::tuple<uint8_t, NavigationTypes::Handle, std::vector<POIServiceTypes::AttributeID>>,
    std::tuple<POIServiceTypes::SearchStatusState, uint16_t, std::vector<POIServiceTypes::PoiCAMDetails>>
    > resultListRequestedStubDispatcher;
/**
 * This method retrieves the details associated to one or more POI.
        It
 *  contains the name, the parent categories, the list of attributes, the icons,
 *  ... .
 */
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    POIContentManagerStub,
    std::tuple<std::vector<POIServiceTypes::POI_ID>>,
    std::tuple<std::vector<POIServiceTypes::SearchResultDetails>>
    > poiDetailsRequestedStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    POIContentManagerDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class POIContentManagerDBusStubAdapter: public POIContentManagerDBusStubAdapterInternal, public std::enable_shared_from_this<POIContentManagerDBusStubAdapter> {
public:
    POIContentManagerDBusStubAdapter(
                         const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                         const std::string& commonApiAddress,
                         const std::string& dbusInterfaceName,
                         const std::string& dbusBusName,
                         const std::string& dbusObjectPath,
                         const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
                         const std::shared_ptr<CommonAPI::StubBase>& stub) :
            CommonAPI::DBus::DBusStubAdapter(
                            factory,
                            commonApiAddress,
                            dbusInterfaceName,
                            dbusBusName,
                            dbusObjectPath,
                            dbusConnection,
                            false),
            POIContentManagerDBusStubAdapterInternal(
                            factory,
                            commonApiAddress,
                            dbusInterfaceName,
                            dbusBusName,
                            dbusObjectPath,
                            dbusConnection,
                            stub) { }
};

} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Manager_DBUS_STUB_ADAPTER_H_
