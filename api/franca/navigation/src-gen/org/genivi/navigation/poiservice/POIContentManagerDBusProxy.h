/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * This interface offers methods that implement the POI search functionality of a
 *  navigation system.
 */
#ifndef ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Manager_DBUS_PROXY_H_
#define ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Manager_DBUS_PROXY_H_

#include <org/genivi/navigation/poiservice/POIContentManagerProxyBase.h>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusFactory.h>
#include <CommonAPI/DBus/DBusProxy.h>
#include <CommonAPI/DBus/DBusEvent.h>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

class POIContentManagerDBusProxy: virtual public POIContentManagerProxyBase, virtual public CommonAPI::DBus::DBusProxy {
 public:
    POIContentManagerDBusProxy(
                    const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyconnection);

    virtual ~POIContentManagerDBusProxy() { }


    virtual ConfigurationChangedEvent& getConfigurationChangedEvent();
    virtual CategoriesRemovedEvent& getCategoriesRemovedEvent();
    virtual POIAddedEvent& getPOIAddedEvent();
    virtual POIRemovedEvent& getPOIRemovedEvent();

    /**
     * This method returns the API version implemented by the content access module.
     */
    virtual void getVersion(CommonAPI::CallStatus& callStatus, NavigationTypes::Version& version);
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(GetVersionAsyncCallback callback);
    /**
     * Set the current language set for the search by poi provider module.
           
     *  The language defines the poi and categories name and details language. If the
     *  language is not supported, the default details will be returned in the native
     *  language.
     */
    virtual void setLocale(const std::string& languageCode, const std::string& countryCode, const std::string& scriptCode, CommonAPI::CallStatus& callStatus);
    virtual std::future<CommonAPI::CallStatus> setLocaleAsync(const std::string& languageCode, const std::string& countryCode, const std::string& scriptCode, SetLocaleAsyncCallback callback);
    /**
     * Get the current language set for the search by poi provider module.
     */
    virtual void getLocale(CommonAPI::CallStatus& callStatus, std::string& languageCode, std::string& countryCode, std::string& scriptCode);
    virtual std::future<CommonAPI::CallStatus> getLocaleAsync(GetLocaleAsyncCallback callback);
    /**
     * Get the supported set of locales for the search by poi provider module.
     */
    virtual void getSupportedLocales(CommonAPI::CallStatus& callStatus, std::vector<POIServiceTypes::Locales>& localeList);
    virtual std::future<CommonAPI::CallStatus> getSupportedLocalesAsync(GetSupportedLocalesAsyncCallback callback);
    /**
     * This method retrieves the list od POI categories available (pre-defined and
     *  custom).
     */
    virtual void getAvailableCategories(CommonAPI::CallStatus& callStatus, std::vector<POIServiceTypes::CategoryAndName>& categories);
    virtual std::future<CommonAPI::CallStatus> getAvailableCategoriesAsync(GetAvailableCategoriesAsyncCallback callback);
    /**
     * Get the root category id. That would be ALL_CATEGORIES.
     */
    virtual void getRootCategory(CommonAPI::CallStatus& callStatus, POIServiceTypes::CategoryID& category);
    virtual std::future<CommonAPI::CallStatus> getRootCategoryAsync(GetRootCategoryAsyncCallback callback);
    /**
     * Get the children categories id and type (top level) from the a parent unique id.
     */
    virtual void getChildrenCategories(const POIServiceTypes::CategoryID& category, CommonAPI::CallStatus& callStatus, std::vector<POIServiceTypes::CategoryAndLevel>& categories);
    virtual std::future<CommonAPI::CallStatus> getChildrenCategoriesAsync(const POIServiceTypes::CategoryID& category, GetChildrenCategoriesAsyncCallback callback);
    /**
     * Get the parent categories id and type (top level) from the a unique id.
     */
    virtual void getParentCategories(const POIServiceTypes::CategoryID& category, CommonAPI::CallStatus& callStatus, std::vector<POIServiceTypes::CategoryAndLevel>& categories);
    virtual std::future<CommonAPI::CallStatus> getParentCategoriesAsync(const POIServiceTypes::CategoryID& category, GetParentCategoriesAsyncCallback callback);
    /**
     * Creates a category by name and return an unique id.
     */
    virtual void createCategory(const POIServiceTypes::CAMCategory& category, CommonAPI::CallStatus& callStatus, POIServiceTypes::CategoryID& unique_id);
    virtual std::future<CommonAPI::CallStatus> createCategoryAsync(const POIServiceTypes::CAMCategory& category, CreateCategoryAsyncCallback callback);
    /**
     * Removes a list of categories. Because of required time to remove it from the
     *  database, a signal is emitted when the deletion is done.
     */
    virtual void removeCategories(const std::vector<POIServiceTypes::CategoryID>& categories, CommonAPI::CallStatus& callStatus);
    virtual std::future<CommonAPI::CallStatus> removeCategoriesAsync(const std::vector<POIServiceTypes::CategoryID>& categories, RemoveCategoriesAsyncCallback callback);
    /**
     * Adds a list of POIs to a category. Because of required time to add it to the
     *  database, a signal is emitted when the update is done, that gives the id of
     *  the elements added
     */
    virtual void addPOIs(const POIServiceTypes::CategoryID& unique_id, const std::vector<POIServiceTypes::PoiAddedDetails>& poiList, CommonAPI::CallStatus& callStatus);
    virtual std::future<CommonAPI::CallStatus> addPOIsAsync(const POIServiceTypes::CategoryID& unique_id, const std::vector<POIServiceTypes::PoiAddedDetails>& poiList, AddPOIsAsyncCallback callback);
    /**
     * Removes a list of POIs to a category. Because of required time to remove it
     *  from the database, a signal is emitted when the update is done.
     */
    virtual void removePOIs(const std::vector<POIServiceTypes::POI_ID>& ids, CommonAPI::CallStatus& callStatus);
    virtual std::future<CommonAPI::CallStatus> removePOIsAsync(const std::vector<POIServiceTypes::POI_ID>& ids, RemovePOIsAsyncCallback callback);
    /**
     * This method is sent by the POI service component to inform all the CAM that a
     *  new POI search was started.
            It provides all the relevant search
     *  parameters. Of course the CAM will only be aware of the search if it registers
     *  one of the search categories.
     */
    virtual void poiSearchStarted(const NavigationTypes::Handle& poiSearchHandle, const uint16_t& maxSize, const NavigationTypes::Coordinate3D& location, const std::vector<POIServiceTypes::CategoryAndRadius>& poiCategories, const std::vector<POIServiceTypes::AttributeDetails>& poiAttributes, const std::string& inputString, const uint16_t& sortOption, CommonAPI::CallStatus& callStatus);
    virtual std::future<CommonAPI::CallStatus> poiSearchStartedAsync(const NavigationTypes::Handle& poiSearchHandle, const uint16_t& maxSize, const NavigationTypes::Coordinate3D& location, const std::vector<POIServiceTypes::CategoryAndRadius>& poiCategories, const std::vector<POIServiceTypes::AttributeDetails>& poiAttributes, const std::string& inputString, const uint16_t& sortOption, PoiSearchStartedAsyncCallback callback);
    /**
     * This method cancels the search for the current id.
     */
    virtual void poiSearchCanceled(const NavigationTypes::Handle& poiSearchHandle, CommonAPI::CallStatus& callStatus);
    virtual std::future<CommonAPI::CallStatus> poiSearchCanceledAsync(const NavigationTypes::Handle& poiSearchHandle, PoiSearchCanceledAsyncCallback callback);
    /**
     * This method provides the poi results list found by the CAM.
            As the POI
     *  unique id is managed by the POI component, the CAM only provides the POI name,
     *  the category and coordinates as well as all the relevant detailed information.
     */
    virtual void resultListRequested(const uint8_t& camId, const NavigationTypes::Handle& poiSearchHandle, const std::vector<POIServiceTypes::AttributeID>& attributes, CommonAPI::CallStatus& callStatus, POIServiceTypes::SearchStatusState& statusValue, uint16_t& resultListSize, std::vector<POIServiceTypes::PoiCAMDetails>& resultList);
    virtual std::future<CommonAPI::CallStatus> resultListRequestedAsync(const uint8_t& camId, const NavigationTypes::Handle& poiSearchHandle, const std::vector<POIServiceTypes::AttributeID>& attributes, ResultListRequestedAsyncCallback callback);
    /**
     * This method retrieves the details associated to one or more POI.
            It
     *  contains the name, the parent categories, the list of attributes, the icons,
     *  ... .
     */
    virtual void poiDetailsRequested(const std::vector<POIServiceTypes::POI_ID>& source_id, CommonAPI::CallStatus& callStatus, std::vector<POIServiceTypes::SearchResultDetails>& results);
    virtual std::future<CommonAPI::CallStatus> poiDetailsRequestedAsync(const std::vector<POIServiceTypes::POI_ID>& source_id, PoiDetailsRequestedAsyncCallback callback);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

 private:

    CommonAPI::DBus::DBusEvent<ConfigurationChangedEvent> configurationChanged_;
    CommonAPI::DBus::DBusEvent<CategoriesRemovedEvent> categoriesRemoved_;
    CommonAPI::DBus::DBusEvent<POIAddedEvent> pOIAdded_;
    CommonAPI::DBus::DBusEvent<POIRemovedEvent> pOIRemoved_;

};



} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Manager_DBUS_PROXY_H_
