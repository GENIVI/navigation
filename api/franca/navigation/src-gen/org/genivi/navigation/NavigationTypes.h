/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.6.v20140519.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef ORG_GENIVI_NAVIGATION_Navigation_Types_H_
#define ORG_GENIVI_NAVIGATION_Navigation_Types_H_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/ByteBuffer.h>
#include <CommonAPI/InputStream.h>
#include <CommonAPI/OutputStream.h>
#include <CommonAPI/SerializableStruct.h>
#include <CommonAPI/types.h>
#include <cstdint>
#include <string>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace navigation {

namespace NavigationTypes {
    /**
     * version.
     */
    /**
     * version.
     */
    struct Version: CommonAPI::SerializableStruct {
        /**
         * when the major changes, then backward compatibility with previous releases is
         *  not granted.
         */
         uint16_t versionMajor;
        /**
         * when the minor changes, then backward compatibility with previous releases is
         *  granted, but something changed in the implementation of the API (e.g. new
         *  methods may have been added).
         */
         uint16_t versionMinor;
        /**
         * when the micro changes, then backward compatibility with previous releases is
         *  granted (bug fixes or documentation modifications).
         */
         uint16_t versionMicro;
        /**
         * release date (e.g. 21-06-2011).
         */
         std::string date;
    
        Version() = default;
        Version(const uint16_t& versionMajor, const uint16_t& versionMinor, const uint16_t& versionMicro, const std::string& date);
    
    
        virtual void readFromInputStream(CommonAPI::InputStream& inputStream);
        virtual void writeToOutputStream(CommonAPI::OutputStream& outputStream) const;
    
        static inline void writeToTypeOutputStream(CommonAPI::TypeOutputStream& typeOutputStream) {
            typeOutputStream.writeUInt16Type();
            typeOutputStream.writeUInt16Type();
            typeOutputStream.writeUInt16Type();
            typeOutputStream.writeStringType();
        }
    };
    typedef uint32_t Handle;
    struct Coordinate2D: CommonAPI::SerializableStruct {
         double latitude;
         double longitude;
    
        Coordinate2D() = default;
        Coordinate2D(const double& latitude, const double& longitude);
    
    
        virtual void readFromInputStream(CommonAPI::InputStream& inputStream);
        virtual void writeToOutputStream(CommonAPI::OutputStream& outputStream) const;
    
        static inline void writeToTypeOutputStream(CommonAPI::TypeOutputStream& typeOutputStream) {
            typeOutputStream.writeDoubleType();
            typeOutputStream.writeDoubleType();
        }
    };
    struct Coordinate3D: Coordinate2D {
         int32_t altitude;
    
        Coordinate3D() = default;
        Coordinate3D(const double& latitude, const double& longitude, const int32_t& altitude);
    
    
        virtual void readFromInputStream(CommonAPI::InputStream& inputStream);
        virtual void writeToOutputStream(CommonAPI::OutputStream& outputStream) const;
    
        static inline void writeToTypeOutputStream(CommonAPI::TypeOutputStream& typeOutputStream) {
            Coordinate2D::writeToTypeOutputStream(typeOutputStream);
            typeOutputStream.writeInt32Type();
        }
    };
    typedef std::vector<Coordinate2D> Polygon;
    typedef Polygon Area;
    struct Rectangle: CommonAPI::SerializableStruct {
         Coordinate2D topLeft;
         Coordinate2D bottomRight;
    
        Rectangle() = default;
        Rectangle(const Coordinate2D& topLeft, const Coordinate2D& bottomRight);
    
    
        virtual void readFromInputStream(CommonAPI::InputStream& inputStream);
        virtual void writeToOutputStream(CommonAPI::OutputStream& outputStream) const;
    
        static inline void writeToTypeOutputStream(CommonAPI::TypeOutputStream& typeOutputStream) {
            typeOutputStream.beginWriteStructType();
            typeOutputStream.writeDoubleType();typeOutputStream.writeDoubleType();
            typeOutputStream.endWriteStructType();
            typeOutputStream.beginWriteStructType();
            typeOutputStream.writeDoubleType();typeOutputStream.writeDoubleType();
            typeOutputStream.endWriteStructType();
        }
    };
    enum class BasicEnum: int32_t {
        INVALID = 0x0
    };
    
    // Definition of a comparator still is necessary for GCC 4.4.1, topic is fixed since 4.5.1
    struct BasicEnumComparator;
    /**
     * Settings
     */
    enum class Settings: int32_t {
        INVALID = 0x0,
        UNITS_OF_MEASUREMENT = 0x30,
        LOCALE = 0x25,
        TIME_FORMAT = 0x3,
        COORDINATES_FORMAT = 0x6
    };
    
    // Definition of a comparator still is necessary for GCC 4.4.1, topic is fixed since 4.5.1
    struct SettingsComparator;
    typedef uint64_t Timestamp;
    typedef double Distance;
    typedef CommonAPI::ByteBuffer LinkId;

bool operator==(const Version& lhs, const Version& rhs);
inline bool operator!=(const Version& lhs, const Version& rhs) {
    return !(lhs == rhs);
}
bool operator==(const Coordinate2D& lhs, const Coordinate2D& rhs);
inline bool operator!=(const Coordinate2D& lhs, const Coordinate2D& rhs) {
    return !(lhs == rhs);
}
bool operator==(const Coordinate3D& lhs, const Coordinate3D& rhs);
inline bool operator!=(const Coordinate3D& lhs, const Coordinate3D& rhs) {
    return !(lhs == rhs);
}
bool operator==(const Rectangle& lhs, const Rectangle& rhs);
inline bool operator!=(const Rectangle& lhs, const Rectangle& rhs) {
    return !(lhs == rhs);
}
inline CommonAPI::InputStream& operator>>(CommonAPI::InputStream& inputStream, BasicEnum& enumValue) {
    return inputStream.readEnumValue<int32_t>(enumValue);
}

inline CommonAPI::OutputStream& operator<<(CommonAPI::OutputStream& outputStream, const BasicEnum& enumValue) {
    return outputStream.writeEnumValue(static_cast<int32_t>(enumValue));
}

struct BasicEnumComparator {
    inline bool operator()(const BasicEnum& lhs, const BasicEnum& rhs) const {
        return static_cast<int32_t>(lhs) < static_cast<int32_t>(rhs);
    }
};

inline CommonAPI::InputStream& operator>>(CommonAPI::InputStream& inputStream, Settings& enumValue) {
    return inputStream.readEnumValue<int32_t>(enumValue);
}

inline CommonAPI::OutputStream& operator<<(CommonAPI::OutputStream& outputStream, const Settings& enumValue) {
    return outputStream.writeEnumValue(static_cast<int32_t>(enumValue));
}

struct SettingsComparator {
    inline bool operator()(const Settings& lhs, const Settings& rhs) const {
        return static_cast<int32_t>(lhs) < static_cast<int32_t>(rhs);
    }
};



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.genivi.navigation.NavigationTypes";
    return typeCollectionName;
}


} // namespace NavigationTypes

} // namespace navigation
} // namespace genivi
} // namespace org

namespace CommonAPI {

    template<>
    struct BasicTypeWriter<org::genivi::navigation::NavigationTypes::BasicEnum> {
        inline static void writeType (CommonAPI::TypeOutputStream& typeStream) {
            typeStream.writeInt32EnumType();
        }
    };
    
    template<>
    struct InputStreamVectorHelper<org::genivi::navigation::NavigationTypes::BasicEnum> {
        static void beginReadVector(InputStream& inputStream, const std::vector<org::genivi::navigation::NavigationTypes::BasicEnum>& vectorValue) {
            inputStream.beginReadInt32EnumVector();
        }
    };
    
    template <>
    struct OutputStreamVectorHelper<org::genivi::navigation::NavigationTypes::BasicEnum> {
        static void beginWriteVector(OutputStream& outputStream, const std::vector<org::genivi::navigation::NavigationTypes::BasicEnum>& vectorValue) {
            outputStream.beginWriteInt32EnumVector(vectorValue.size());
        }
    };
    template<>
    struct BasicTypeWriter<org::genivi::navigation::NavigationTypes::Settings> {
        inline static void writeType (CommonAPI::TypeOutputStream& typeStream) {
            typeStream.writeInt32EnumType();
        }
    };
    
    template<>
    struct InputStreamVectorHelper<org::genivi::navigation::NavigationTypes::Settings> {
        static void beginReadVector(InputStream& inputStream, const std::vector<org::genivi::navigation::NavigationTypes::Settings>& vectorValue) {
            inputStream.beginReadInt32EnumVector();
        }
    };
    
    template <>
    struct OutputStreamVectorHelper<org::genivi::navigation::NavigationTypes::Settings> {
        static void beginWriteVector(OutputStream& outputStream, const std::vector<org::genivi::navigation::NavigationTypes::Settings>& vectorValue) {
            outputStream.beginWriteInt32EnumVector(vectorValue.size());
        }
    };

}


namespace std {
    //Hash for BasicEnum
    template<>
    struct hash<org::genivi::navigation::NavigationTypes::BasicEnum> {
        inline size_t operator()(const org::genivi::navigation::NavigationTypes::BasicEnum& basicEnum) const {
            return static_cast<int32_t>(basicEnum);
        }
    };
    //Hash for Settings
    template<>
    struct hash<org::genivi::navigation::NavigationTypes::Settings> {
        inline size_t operator()(const org::genivi::navigation::NavigationTypes::Settings& settings) const {
            return static_cast<int32_t>(settings);
        }
    };
}

#endif // ORG_GENIVI_NAVIGATION_Navigation_Types_H_
