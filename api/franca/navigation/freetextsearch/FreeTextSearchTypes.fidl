/* 
SPDX-License-Identifier: MPL-2.0
Copyright (C) 2015-2016, PCA Peugeot CitroÃ«n, XS Embedded GmbH, TomTom International B.V., Continental Automotive GmbH, BMW Car IT GmbH,  Alpine Electronics R&D Europe GmbH, AISIN AW CO., LTD.,  Neusoft Technology Solutions GmbH, Jaguar Land Rover Limited, Visteon Corporation, Elektrobit Automotive GmbH, Harman-Becker Automotive GmbH
This Source Code Form is subject to the terms of the
Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with
this file, you can obtain one at http://mozilla.org/MPL/2.0/.
*/

package org.genivi.navigation.freetextsearch

import org.genivi.navigation.NavigationTypes.* from "../NavigationTypes.fidl"

typeCollection FreeTextSearchTypes {
	version {
		 major 0 
		 minor 1 
	}

  	<** 
  		@description: Type of Sorting.
  	**>
  	enumeration SortingType {
  		AIR_TO_DISTANCE = 0x0
    	RELEVANCE				= 0x1
    	UNDEFINED				= 0xF
  	}
  
    <** 
    	@description: A requestId is an identifier used to match a response to a request.
        The type is aligned with the one used by the id of POISearch
    **>
    typedef RequestId is UInt32

/* string types */	
	
    <** 
    	@description: Type to represent most texts in this interface.
        Character set = UNICODE
        Maximum length = 4095
    **>
    typedef FtsString is String
		
    <** 
    	@description: A list of strings
        maximum length = 100
    **>
    array FtsStringList of FtsString
			
/* shape types */		

  <** @description: A union to contain any of the possble search shapes. **>
    union ShapeSpecificDetails {
        Circle circle
        Rectangle rectangle
    }
	
	<** @description: A shape. **>			
	struct Shape {
		ShapeType shapeType 
		ShapeSpecificDetails shapeDetails
	}
		
    <** @description: A list of shapes.
        maximum length = 31
    **>
    array ShapeList of Shape
		
    <** 
    	@description: A maximum number of results to be returned.
        Range[0:1000]
    **>
    typedef PageSize is UInt16

    <** 
    	@description: Search options for a search request.
        The options are flags which can be OR-ed together to create SearchOptions.
    **>
    enumeration SearchOption {
    	<** @description: Search addresses. **>
        ADDRESS                              =     1
    	<** @description: Search POIs. **>
        POI                                  =     2
        <** @description: Get POI suggestions. **>
        POI_SUGGESTION                       =     4
        <** @description: Do not search places when doing an address search. **>
        NO_PLACES                            =  65536
        <** @description: Do not search streets when doing an address search. **>
        NO_STREETS                           = 131072
        <** @description: Do not make assumptions on POI categories. **>
        NO_POI_CATEGORY_ASSUMPTIONS          = 262144
    }
		
    <** 
    	@description: An OR-ed combination of SearchOption flags.
        Range[0:0x7fffffff]
    **>
    typedef SearchOptions is UInt32

    <** 
    	@description: Search request status. 
    **>
	enumeration FtsStatus {
    	OK
    	<** @description: User aborted search. **>
        ABORTED
        <** @description: Search string is too short to evaluate. **>
        PREFIX_TOO_SHORT
        <** @description: There is no search for which a next page can be requested.  **>
        NO_SEARCH_TO_CONTINUE
        INTERNAL_ERROR
        <** @description: No FTS index for the current map. **>
        INDEX_MISSING
    	<** @description: The FTS index format is not supported. **>
        BAD_VERSION
    	<** @description: A search query not supported by the FTS engine. **>
        INVALID_PARAMETER_QUERY
    	<** @description: A search location not on this earth. **>
        INVALID_PARAMETER_SEARCH_LOCATION
    	<** @description: An invalid page size. **>
        INVALID_PARAMETER_PAGE_SIZE
    	<** @description: Invalid search options passed to the FTS engine. **>
        INVALID_PARAMETER_SEARCH_OPTIONS
    	<** @description: Invalid search conditions passed to the FTS engine. **>
        INVALID_PARAMETER_SEARCH_CONDITIONS
    	<** @description: One or  more of the search shapes are invalid. **>
        INVALID_PARAMETER_SEARCH_SHAPES
    }
				
    <** @description: A list of LocationHandles.
        maximum length = 4096
    **>
    array LocationHandleList of LocationHandle

/* address types */

    <** @description: An address can represent a street, a named place, or a mapcode. **>
    enumeration AddressType {
        STREET
        PLACE
        MAP_CODE
    }
			
	<** 
		@description: If a user entered a non-existing house number then the closest existing
	    number is returned. The houseNumberFromInput will contain the house
	    number from the user input, the houseNumber will contain closest house number.
	    If the map does not contain house numbers for the street, but the user
	    input seems to have a house number, then houseNumber will be empty and
	    houseNumberFromInput will contain the number from the input.
	 **>			
	struct StreetDetails {
    	<** @description: Name of the street. 
    	**>			
		FtsString streetName
    	<** @description: If a user entered a non-existing house number then the closest existing
	        number is returned. The houseNumberFromInput will contain the house
	        number from the user input, the houseNumber will contain closest house number.
	        If the map does not contain house numbers for the street, but the user
	        input seems to have a house number, then houseNumber will be empty and
    	    houseNumberFromInput will contain the number from the input. 
		**>			
		FtsString houseNumber
    	<** @description: The house number that the search engine recognized in the user input.
	        Can be empty.
	    **>			
		FtsString houseNumberFromInput
	}

    enumeration PlaceType {
    	<** @description: a place of unknown type. **>
        OTHER
    	<** @description: a center of a settlement. **>
        SETTLEMENT = 2
    }
			
	<** @description: Place details. **>			
	struct PlaceDetails {
		PlaceType placeType
		FtsString placeName
    	<** @description: The bounding box of this place (an estimate). **>			
		Rectangle placeBoundingBox
	}

	<** @description: Mapcode details. **>			
	struct MapCodeDetails {
    	<** @description: If the location of the mapcode is close to a street, this field
    	    contains the name of that street, otherwise this field is left empty.
    	**>			
		FtsString closestStreetName
	}

  	<** @description: A union to contain any of the specific types of address details. **>
    union AddressTypeSpecificDetails {
        StreetDetails streetDetails
        PlaceDetails placeDetails
        MapCodeDetails mapCodeDetails
    }

	<** @description: Address details for lines, nodes and mapcodes. **>			
	struct AddressDetails {
		AddressType addressType
    	AddressTypeSpecificDetails addressTypeSpecificDetails
	}
			
	<** @description: Address information. **>			
	struct Address {
		LocationHandle locationHandle
		FtsString countryCode
    	<** @description: Optional state code. **>			
		FtsString stateCode
    	<** @description: There can be multiple place names. **>			
		FtsStringList places
    	<** @description: There can be multiple postal codes assigned to a street. **>			
		FtsStringList postalCodes
    	<** @description: Mapcode of the coordinate **>			
		FtsString mapCode
    	AddressDetails addressDetails
    	Coordinate2D coordinate
    	<** @description: Distance in meters from the search location.
    	    -1 if no search location is given.
    	**>			
		Radius distance
		/* confidenceLevel is part of the suggestion of Sandu, in place of score */
	  	<** @description : 0..255 value scale decided by each OEM/SDK supplier implementation dependant**>
	  	UInt8		confidenceLevel
    	<** @description: Indicates whether this match is fuzzy, i.e. it was matched with misspellings. **>			
		Boolean fuzzyMatch
	}
		
    <** @description: A list of addresses.
        maximum length = 500
    **>
    array Addresses of Address
		
/* POI types */
		
    <** 
    	@description: Numerical POI category code.
        Range[0:0xffffffff]
    **>
    typedef FtsPOICategoryCode is UInt32
	
	<** @description: POI information. **>			
	struct FtsPOI {
		LocationHandle locationHandle
		FtsPOICategoryCode categoryCode
		FtsStringList brandNames
		FtsString poiName
		FtsString address
		FtsStringList place
		FtsStringList postalCode
		FtsString mapCode
		FtsString countryCode
		FtsString stateCode
		FtsString telephone
		Coordinate2D coordinate
    	<** @description: Distance in meters from the search location.
    	    -1 if no search location is given.
    	**>			
		Radius distance
		/* confidenceLevel is part of the suggestion of Sandu, in place of score */
	  	<** @description : 0..255 value scale decided by each OEM/SDK supplier implementation dependant**>
	  	UInt8		confidenceLevel
    	<** @description: Indicates whether this match is fuzzy, i.e. it was matched with misspellings. **>			
		Boolean fuzzyMatch
	}
		
    <** @description: A list of POIs.
        maximum length = 500
    **>
    array POIs of FtsPOI
	
	<** @description: Data type for POI category suggestions. **>			
	struct FtsPOICategory {
		FtsPOICategoryCode categoryCode
		FtsString categoryName
    	<** @description: The search engine recognizes synonyms and names associated with a
    	    POI category. If a match on such a name is found, then this attribute is set to that name.
    	**>			
		FtsString matchedName
    	<** @description: Text that can be used for a suggestion like: "<categoryName> <searchTextSuggestion>"
    	    Typically this contains the original query text, where the recognized
    	    category name or synonym has been removed.
    	**>			
		FtsString searchTextSuggestion
    	<** @description: A list of addresses that can be used for suggestions like: "<categoryName> near <address>
    	    Note the addresses in this list do not have a valid location handle
    	    as the address is only needed to be displayed as a suggestion.
    	    The coordinates of an address can be used for a POI window query if the
    	    user picks a suggestion.
    	**>			
		Addresses nearAddressSuggestions
		/* confidenceLevel is part of the suggestion of Sandu, in place of score */
	  	<** @description : 0..255 value scale decided by each OEM/SDK supplier implementation dependant**>
	  	UInt8		confidenceLevel
	}
				
    <** 
    	@description: A list of POI categories.
        maximum length = 500
    **>
    array POICategories of FtsPOICategory
	
    <** @description: Indicates on a scale from 0 to 5 how fuzzy the search results can be.
        0 means only an exact search is performed, 1 is the lowest level of fuzzy search
        and 5 means a very fuzzy search.
        Range[0:5]
    **>
    typedef FuzzyLevel is UInt8
	
}
