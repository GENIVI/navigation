/* 
SPDX-License-Identifier: MPL-2.0
Copyright (C) 2014, PCA Peugeot Citroï¿½n, XS Embedded GmbH, TomTom International B.V., Continental Automotive GmbH, BMW Car IT GmbH,  Alpine Electronics R&D Europe GmbH, AISIN AW CO., LTD.,  Neusoft Technology Solutions GmbH, Jaguar Land Rover Limited, Visteon Corporation, Elektrobit Automotive GmbH
This Source Code Form is subject to the terms of the
Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with
this file, you can obtain one at http://mozilla.org/MPL/2.0/.
*/

package org.genivi.navigation.navigationcore

import org.genivi.navigation.NavigationTypes.* from "../NavigationTypes.fidl"
import org.genivi.navigation.navigationcore.MapMatchedPositionTypes.* from "MapMatchedPositionTypes.fidl"

<**
	@description : MapMatchedPosition = This interface offers functions to retrieve the map matched position and to simulate positioning
**>

interface MapMatchedPosition {
	version {
		major 1 
		minor 0
	}

	<**
		@description : getVersion = This method returns the API version implemented by the server application
	**>
	method getVersion {
		out {
			Version ^version
		}
	}

	<**
		@description : setSimulationMode = This method activates or deactivates the simulation mode
	**>
	method setSimulationMode {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : activate = flag. TRUE means that the simulation mode is activated.
			**>
			Boolean activate
		}
	}

	<**
		@description : getSimulationStatus = This method retrieves the simulation status
	**>
	method getSimulationStatus {
		out {

			<**
				@description : simulationStatus = enum(SIMULATION_STATUS_NO_SIMULATION, SIMULATION_STATUS_RUNNING, SIMULATION_STATUS_PAUSED, SIMULATION_STATUS_FIXED_POSITION)
			**>
			SimulationStatus simulationStatus
		}
	}

	<**
		@description :  AddSimulationStatusListener = Add this node as a listener to Simulation Status changes.
	**>
	method addSimulationStatusListener {
	}

	<**
		@description :  RemoveSimulationStatusListener = Remove this node as a listener to Simulation Status changes.
	**>
	method removeSimulationStatusListener {
	}

	<**
		@description : setSimulationSpeed = This method sets the speed factor for the simulation mode
	**>
	method setSimulationSpeed {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle

			<**
				@description : speedFactor = speed factor
			**>
			Int8 speedFactor
		}
	}

	<**
		@description : getSimulationSpeed = returns the speed factor for the simulation mode
	**>
	method getSimulationSpeed {
		out {

			<**
				@description : speedFactor = speed factor
			**>
			Int8 speedFactor
		}
	}

	<**
		@description :  AddSimulationSpeedListener = Add this node as a listener to simulation speed factor changes.
	**>
	method addSimulationSpeedListener {
	}

	<**
		@description :  RemoveSimulationSpeedListener = Remove this node as a listener to simulation speed factor changes.
	**>
	method removeSimulationSpeedListener {
	}

	<**
		@description : startSimulation = This method starts, or resumes, a Follow Active Route simulation
	**>
	method startSimulation {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle
		}
	}

	<**
		@description : pauseSimulation = This method freezes the current location
	**>
	method pauseSimulation {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle
		}
	}

	<**
		@description : getPosition = This method returns the current position
	**>
	method getPosition {
		in {
			PositionItemKey[] valuesToReturn
		}
		out {
			PositionItemDict position
		}
	}

	<**
		@description : setPosition = This method sets the position to a specific location
	**>
	method setPosition {
		in {

			<**
				@description : sessionHandle = Session handle. Range[0x0:0x7fffffff]. 0x0 is reserved as an invalid handle value
			**>
			Handle sessionHandle
			
			PositionItemDict position
		}
	}

	<**
		@description : getAddress = This method returns the current address
	**>
	method getAddress {
		in {
			AddressItemKey[] valuesToReturn
		}
		out {
			AddressItemDict address
		}
	}

	<**
		@description : positionOnSegment = This method returns the vehicle position on a route segment
	**>
	method getPositionOnSegment {
		in {
			PositionOnSegmentKey [] valuesToReturn
		}
		out {
			PositionOnSegmentDict positionOnSegment
		}
	}

	<**
		@description : getStatus = This method returns the current status
	**>
	method getStatus {
		in {
			PositionStatus [] valuesToReturn
		}
		out {
			PositionStatusDict status
		}
	}

	<**
		@description : simulationStatusChanged = This signal is emitted when the Simulation Status has changed
	**>
	broadcast simulationStatusChanged {
		out {

			<**
				@description : simulationStatus = enum(SIMULATION_STATUS_NO_SIMULATION, SIMULATION_STATUS_RUNNING, SIMULATION_STATUS_PAUSED, SIMULATION_STATUS_FIXED_POSITION)
			**>
			SimulationStatus simulationStatus
		}
	}

	<**
		@description : simulationSpeedChanged = This signal is emitted when the simulation speed factor has changed
	**>
	broadcast simulationSpeedChanged {
		out {

			<**
				@description : speedFactor = speed factor
			**>
			Int8 speedFactor
		}
	}

	<**
		@description : positionUpdate = This signal is called to notify a client application of a position change. The update frequency is implementation specific. The maximal allowed frequency is 10Hz
	**>
	broadcast positionUpdate {
		out {
			PositionItemKey [] changedValues
		}
	}

	<**
		@description : addressUpdate = This signal is called to notify a client application that the current address changed
	**>
	broadcast addressUpdate {
		out {
			AddressItemKey[] changedValues
		}
	}

	<**
		@description : positionOnSegmentUpdate = This signal is called to notify the client that the vehicle position on the route segment changed
	**>
	broadcast positionOnSegmentUpdate {
		out {
			PositionOnSegmentKey[] changedValues
		}
	}

	<**
		@description : statusUpdate = This signal is emitted to notifiy a client application that the current status changed
	**>
	broadcast statusUpdate {
		out {
			PositionStatus [] changedValues
		}
	}

	<**
		@description : offroadPositionChanged = This signal is emitted when the heading and the distance to the closest point on the road network changes
	**>
	broadcast offRoadPositionChanged {
		out {

			<**
				@description : distance = distance in meters to the closest point on the road network
			**>
			UInt32 distance

			<**
				@description : direction = direction in degrees relatively to the closest point on the road network. Range [0:360]
			**>
			Int32 direction
		}
	}




}