// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2014, PCA Peugeot Citroï¿½n, XS Embedded GmbH, TomTom International B.V., Continental Automotive GmbH, BMW Car IT GmbH,  Alpine Electronics R&D Europe GmbH, AISIN AW CO., LTD.,  Neusoft Technology Solutions GmbH, Jaguar Land Rover Limited, Visteon Corporation, Elektrobit Automotive GmbH
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with
// this file, you can obtain one at http://mozilla.org/MPL/2.0/.

package org.genivi.navigation.navigationcore

import org.genivi.navigation.NavigationTypes.* from "../NavigationTypes.fidl"

typeCollection RoutingTypes {
	
//	enumeration CalculationStatus extends BasicEnum { //Base 0x0130
	enumeration CalculationStatus { //Base 0x0130
 		INVALID 	= 0
  		CALCULATION_OK				= 304
		NO_POSITION					= 305		
	}
	
//	enumeration CalculationError extends BasicEnum {
	enumeration CalculationError {
		INVALID 	= 0
		UNMATCHED_POSITION			= 306
		UNREACHABLE_DESTINATION		= 307
		UNFULFILLED_PREFERENCE_MODE	= 308
	}
	
//	enumeration CostModel extends BasicEnum { //Base 0x0160
	enumeration CostModel { //Base 0x0160
		INVALID 	= 0
		FASTEST			= 352	
		SHORTEST		= 353
		ECOLOGICAL		= 354
		SCENIC			= 355
		EASY			= 356
		OFF_ROAD		= 357 //to be confirmed
		BALANCED		= 358
		CHEAPEST		= 359
	}
  
//	enumeration RoutePreferenceSource extends BasicEnum { //Base 0x0170
	enumeration RoutePreferenceSource { //Base 0x0170
		INVALID 	= 0
		FERRY				= 368
		TOLL_ROADS			= 369
		TUNNELS				= 370
		HIGHWAYS_MOTORWAYS	= 371
		VEHICLE_SIZE_LIMIT	= 372
		CRIME_AREAS			= 373	
	} 	 	
  
 //	enumeration TransportationMeans extends BasicEnum { //Base 0x0180
 	enumeration TransportationMeans { //Base 0x0180
		INVALID 	= 0
		BY_CAR						= 384 
		ON_FOOT						= 385
		LONG_RANGE_TRAINS			= 386
		PUBLIC_TRANSPORTATION		= 387
		BY_BICYCLE					= 388
		BY_TRUCK					= 389
	}
	
//	enumeration Schedule extends BasicEnum { 
	enumeration Schedule { 
		INVALID 	= 0
		ARRIVAL_TIME  		= 394
 		ARRIVAL_DATE		= 395
		DEPARTURE_TIME		= 396
		DEPARTURE_DATE		= 397 
	}

	enumeration RouteOverviewType extends Schedule  {
		TOTAL_TIME			= 398
		TOTAL_DISTANCE		= 399
	}
	
//	enumeration PreferenceMode extends BasicEnum { //Base 0x0190
	enumeration PreferenceMode { //Base 0x0190
		INVALID 	= 0
 		PROHIBIT		= 400
 		AVOID			= 401
 		USE				= 402
 		PREFER			= 403	
 		IGNORE			= 404	
 	}
 	 	
//  	enumeration ConditionPreferenceSource extends BasicEnum { //Base 0x0200
  	enumeration ConditionPreferenceSource { //Base 0x0200
		INVALID 	= 0
  		TRAFFIC_REALTIME	= 512
  	}
 	 	
 	 	
	<**
		@description : struct generated for DBus argument SetRoutePreferences_roadPreferenceList
	**>
	struct RoutePreference {
		PreferenceMode mode
		RoutePreferenceSource source
	}

	<**
		@description : struct generated for DBus argument SetRoutePreferences_conditionPreferenceList
	**>
	struct ConditionPreference {
		PreferenceMode mode
		ConditionPreferenceSource source
	}


	map RouteSchedule {
		Schedule to UInt32
	}

 	enumeration TimeStampedEnum extends BasicEnum {
		TIMESTAMP	= 16
	}

	enumeration GeoLocalizedEnum extends TimeStampedEnum {
		LATITUDE	= 160
		LONGITUDE	= 161
		ALTITUDE	= 162
	}
	
	enumeration WaypointElementType extends GeoLocalizedEnum {
		WAYPOINT_TYPE		= 289
		LOCATION_INPUT		= 17
	}
	
	enumeration RouteSegmentType extends BasicEnum {
		LINK_ID					= 320 		//Base 0x0140
		START_LATITUDE			= 321
		END_LATITUDE			= 322
		START_LONGITUDE			= 323
		END_LONGITUDE			= 324
		START_ALTITUDE			= 325
		END_ALTITUDE			= 326
		ROAD_NAME				= 327
		DISTANCE				= 328
		TIME					= 329
		MANEUVER				= 330
		INSTRUCTION				= 331
        BORDER_CROSSING			= 332
        ADDITIONAL_INFORMATION	= 333
		ROAD_NUMBER				= 334
		START_OFFSET			= 335
		INTERMEDIATE_POINTS		= 288
        HIGHWAY_EXIT			= 116
        ALL						= 65535
	}
	
	enumeration IntermediatePointType {
		HARD_POINT
		SOFT_POINT
	}
	
	union RouteOverviewItem {
		UInt32 uValue
	}
	
	struct IntermediatePoint extends Coordinate2D {
		IntermediatePointType type
	}
	
	//TODO: Incomplete
	union RouteSegmentItem {
		Double doubleValue // LATITUDE, LONGITUDE, ALTITUDE
		IntermediatePoint intermediatePoints
		String stringValue // ROAD_NUMBER
		ByteBuffer linkId
		Int32 int32Value
		Int16 int16Value
		UInt32 uInt32Value
	}
	
	union WayPointItem {
		Double coordinateValue
		Int32 altitudeValue
		IntermediatePointType wayPointValue
		ByteBuffer metaData
	}
	
	map WayPoint {
		WaypointElementType to WayPointItem
	}

	map RouteSegment {
		RouteSegmentType to RouteSegmentItem
	}

	map RouteOverview {
		RouteOverviewType to RouteOverviewItem
	}

	<**
		@description : struct generated for DBus argument SetBlockedRouteStretches_blockParameters
	**>
	struct BlockedRouteElement {
		UInt32 offset
		UInt32 length
	}
	
	
}