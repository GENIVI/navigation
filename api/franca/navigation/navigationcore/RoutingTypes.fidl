/* 
SPDX-License-Identifier: MPL-2.0
Copyright (C) 2014, PCA Peugeot Citroën, XS Embedded GmbH, TomTom International B.V., Continental Automotive GmbH, BMW Car IT GmbH,  Alpine Electronics R&D Europe GmbH, AISIN AW CO., LTD.,  Neusoft Technology Solutions GmbH, Jaguar Land Rover Limited, Visteon Corporation, Elektrobit Automotive GmbH
This Source Code Form is subject to the terms of the
Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with
this file, you can obtain one at http://mozilla.org/MPL/2.0/.
*/

package org.genivi.navigation.navigationcore

import org.genivi.navigation.NavigationTypes.* from "../NavigationTypes.fidl"

typeCollection RoutingTypes {
	
	enumeration CostModel extends BasicEnum {
		FASTEST			= "0x0160"	
		SHORTEST		= "0x0161"
		ECOLOGICAL		= "0x0162"
		SCENIC			= "0x0163"
		EASY			= "0x0164"
		OFF_ROAD		= "0x0165"
		BALANCED		= "0x0166"
		CHEAPEST		= "0x0167"
	}
 
 
 	enumeration PreferenceMode extends BasicEnum { 
 		PROHIBIT		= "0x0190"
 		AVOID			= "0x0191"
 		USE				= "0x0192"
 		PREFER			= "0x0193"	
 		IGNORE			= "0x0194"	
 	}
 	 	
	enumeration RoutePreferenceSource extends BasicEnum { 
		FERRY				= "0x0170"
		TOLL_ROADS			= "0x0171"
		TUNNELS				= "0x0172"
		HIGHWAYS_MOTORWAYS	= "0x0173"
		VEHICLE_SIZE_LIMIT	= "0x0174"
		CRIME_AREAS			= "0x0175"	
	} 	 	
  
  	enumeration ConditionPreferenceSource extends BasicEnum {
  		TRAFFIC_REALTIME	= "0x0200"
  	}
 	 	
 	 	
	enumeration Schedule extends BasicEnum { 
		ARRIVAL_TIME  		= "0x018a"
 		ARRIVAL_DATE		= "0x018b"
		DEPARTURE_TIME		= "0x018c"
		DEPARTURE_DATE		= "0x018d" 
	}

	enumeration TransportationMeans extends BasicEnum {
		BY_CAR						= "0x0180" 
		ON_FOOT						= "0x0181"
		LONG_RANGE_TRAINS			= "0x0182"
		PUBLIC_TRANSPORTATION		= "0x0183"
		BY_BICYCLE					= "0x0184"
		BY_TRUCK					= "0x0185"
	}
	
	enumeration CalculationStatus extends BasicEnum {
  		CALCULATION_OK				= "0x0130"
		NO_POSITION					= "0x0131"		
	}
	
	enumeration CalculationError extends BasicEnum {
		UNREACHABLE_DESTINATION		= "0x0133"
		UNFULFILLED_PREFERENCE_MODE	= "0x0134"
	}
	
	<**
		@description : struct generated for DBus argument SetRoutePreferences_roadPreferenceList
	**>
	struct RoutePreference {
		PreferenceMode mode
		RoutePreferenceSource source
	}

	<**
		@description : struct generated for DBus argument SetRoutePreferences_conditionPreferenceList
	**>
	struct ConiditionPreference {
		PreferenceMode mode
		ConditionPreferenceSource source
	}


	map RouteSchedule {
		Schedule to UInt32
	}

	
	enumeration WapointElementType extends BasicEnum {
		WAYPOINT_TYPE		= "0x0121"
		LOCATION_INPUT		= "0x00b1"
		LATITUDE			= "0x00a0"
		LONGITUDE			= "0x00a1"
		ALTITUDE			= "0x00a2"		
	}
	
	enumeration RouteSegmentType extends BasicEnum {
		LINK_ID					= "0x0140"
		INTERMEDIATE_POINTS		= "0x0120"
		START_LATITUDE			= "0x0141"
		START_LONGITUDE			= "0x0143"
		START_ALTITUDE			= "0x0145"
		END_LATITUDE			= "0x0142"
		END_LONGITUDE			= "0x0144"
		END_ALTITUDE			= "0x0146"
		ROAD_NAME				= "0x0147"
		ROAD_NUMBER				= "0x014e"
		DISTANCE				= "0x0148"
		TIME					= "0x0149"
		MANEUVER				= "0x014a"
		INSTRUCTION				= "0x014b"
        BORDER_CROSSING			= "0x014c"
        ADDITIONAL_INFORMATION	= "0x014d"
        HIGHWAY_EXIT			= "0x0074"
        ALL						= "0xffff"
	}
	
	enumeration IntermediatePointType {
		HARD_POINT
		SOFT_POINT
	}
	
	enumeration RouteOverviewType extends Schedule  {
		TOTAL_DISTANCE			= "0x018f"
		TOTAL_TIME				= "0x018e"
	}
	
	union RouteOverviewItem {
		UInt32 uValue
	}
	
	struct IntermediatePoint extends Coordinate2D {
		IntermediatePointType type
	}
	
	//TODO: Incomplete
	union RouteSegmentItem {
		Double doubleValue // LATITUDE, LONGITUDE, ALTITUDE
		IntermediatePoint intermediatePoints
		String stringValue // ROAD_NUMBER
		ByteBuffer linkId
		Int32 int32Value
		Int16 int16Value
		UInt32 uInt32Value
	}
	
	union WayPointItem {
		Double coordinateValue
		Int32 altitudeValue
		IntermediatePointType wayPointValue
		ByteBuffer metaData
	}
	
	map WayPoint {
		WapointElementType to WayPointItem
	}

	map RouteSegment {
		RouteSegmentType to RouteSegmentItem
	}

	map RouteOverview {
		RouteOverviewType to RouteOverviewItem
	}

	<**
		@description : struct generated for DBus argument SetBlockedRouteStretches_blockParameters
	**>
	struct BlockedRouteElement {
		UInt32 offset
		UInt32 length
	}
	
	
}