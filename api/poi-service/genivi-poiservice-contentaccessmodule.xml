<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="introspect.xsl"?>
<!-- SPDX-License-Identifier: MPL-2.0
     Copyright (C) 2014, BMW Car IT GmbH, Continental Automotive GmbH, PCA Peugeot CitroÃ«n, XS Embedded GmbH, TomTom International B.V., Alpine Electronics R&D Europe GmbH, AISIN AW CO., LTD.,  Neusoft Technology Solutions GmbH, Jaguar Land Rover Limited, Visteon Corporation
     This Source Code Form is subject to the terms of the
     Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with
     this file, you can obtain one at http://mozilla.org/MPL/2.0/.
-->
<node xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="/org/genivi/poiservice" xsi:noNamespaceSchemaLocation="introspect.xsd">
  <interface name="org.genivi.poiservice.POIContentAccessModule">
    <version>1.0.0 (19-12-2012)</version>
    <doc>
      <line>This interface offers a set of common methods to the POI components to deal with all the content access modules (CAM). The CAM provide and update POI and categories information from remote sources to the POIService modules</line>
    </doc>
    <method name="GetVersion">
      <doc>
        <line>GetVersion = This method returns the API version implemented by the content access module.</line>
      </doc>
      <arg name="version" type="(qqqs)" direction="out">
        <doc>
          <line>version = struct(major,minor,micro,date)</line>
          <line>major = when the major changes, then backward compatibility with previous releases is not granted</line>
          <line>minor = when the minor changes, then backward compatibility with previous releases is granted, but something changed in the implementation of the API (e.g. new methods may have been added)</line>
          <line>micro = when the micro changes, then backward compatibility with previous releases is granted (bug fixes or documentation modifications)</line>
          <line>date = release date (e.g. 22-05-2012)</line>
        </doc>
      </arg>
    </method>
    <method name="SetLanguage">
      <doc>
        <line>SetLanguage = Set the current language set for the search by poi provider module.</line>
        <line>The language defines the poi and categories name and details language. If the language is not supported, the default details will be returned in the native language.</line>
      </doc>
      <arg direction="in" name="languageCode" type="s">
        <doc>
          <line>languageCode = The language.</line>
        </doc>
      </arg>
      <arg direction="in" name="countryCode" type="s">
        <doc>
          <line>countryCode = The country specific variant for the language.</line>
        </doc>
      </arg>
    </method>
    <method name="PoiSearchStarted">
      <doc>
        <line>PoiSearchStarted = This method is sent by the POI service component to inform all the CAM that a new POI search was started.</line>
        <line>It provides all the relevant search parameters. Of course the CAM will only be aware of the search if it registers one of the search categories.</line>
      </doc>
      <arg name="poiSearchHandle" type="u" direction="in">
        <doc>
          <line>poiSearchHandle = poi search unique handle. It must be used by the CAM to send the list of results to the component.</line>
        </doc>
      </arg>
      <arg name="maxSize" type="q" direction="in">
        <doc>
          <line>maxSize = max size of the results list</line>
        </doc>
      </arg>
      <arg name="location" type="(ddi)" direction="in">
        <doc>
          <line>location = struct(lat,lon,alt)</line>
          <line>lat = latitude of a vertex of the polygon in format %3.6f. Range [-90:+90]. Example: 48.053250</line>
          <line>lon = longitude of a vertex of the polygon in format %3.6f. Range [-180:+180]. Example: 48.053250</line>
          <line>alt = altitude above the sea level of the current position in meters</line>
        </doc>
      </arg>
      <arg name="poiCategories" type="a(uu)" direction="in">
        <doc>
          <line>poiCategories = array[struct(category, radius)]</line>
          <line>category = enum(INVALID,ALL_CATEGORIES,AIRPORT,RESTAURANT,HOTEL,GAZ_STATION,CAR_PARK, ...)</line>
          <line>radius  = activation or search radius around the position (in 10 meters) for the category. If value is 0 (zero), the default radius (defined for a category) is applied.</line>
          <line>Note: A POI category is a unique ID. It could be a predifined category or a custom one defined by a POI plug-in.</line>
        </doc>
      </arg>
      <arg name="poiAttributes" type="a(uuivib)" direction="in">
        <doc>
          <line>poiAtttributes = array[struct(id, categoryId, type, value, oper, mandatory)]</line>
          <line>id = attribute unique id (see data model)</line>
          <line>categoryId = enum(INVALID,ALL_CATEGORIES,AIRPORT,RESTAURANT,HOTEL,GAZ_STATION,CAR_PARK, ...)</line>
          <line>type = enum(INVALID,STRING,INTEGER,COORDINATES ...)</line>
          <line>value = value or partial value. The value depends on the attribute specifications and type.</line>
          <line>oper = enum(INVALID,MORE_THAN,LESS_THAN,EQUAL, ....)</line>
          <line>mandatory = true if the attribute is mandatory for the search and false for optional.</line>
        </doc>
      </arg>
      <arg name="inputString" type="s" direction="in">
        <doc>
          <line>inputString = contains the name of the poi that is searched. It could be a partial name or an empty string.</line>
        </doc>
      </arg>
      <arg name="sortOption" type="q" direction="in">
        <doc>
          <line>sortOption = enum(SORT_DEFAULT,SORT_BY_DISTANCE,SORT_BY_TIME,ATTRIBUTE_CUSTOM, ... )</line>
          <line>If more than one category was defined for this search, the sort criteria should be compliant with all categories.</line>
        </doc>
      </arg>
    </method>
    <method name="PoiSearchCanceled">
      <doc>
        <line>PoiSearchCanceled = This method cancels the search for the current id</line>
      </doc>
      <arg name="poiSearchHandle" type="u" direction="in">
        <doc>
          <line>poiSearchHandle = poi search unique handle</line>
        </doc>
      </arg>
    </method>
    <method name="ResultListRequested">
      <doc>
        <line>ResultListRequested = This method provides the poi results list found by the CAM.</line>
        <line>As the POI unique id is managed by the POI component, the CAM only provides the POI name, the category and coordinates as well as all the relevant detailed information.</line>
      </doc>
      <arg name="camId" type="y" direction="in">
        <doc>
          <line>camId = Content access module unique id as known by the POI service component.</line>
        </doc>
      </arg>
      <arg name="poiSearchHandle" type="u" direction="in">
        <doc>
          <line>poiSearchHandle = poi search unique handle</line>
        </doc>
      </arg>
      <arg name="attributes" type="au" direction="in">
        <doc>
          <line>attributes = List of attributes id to retrieve. This is optional and the list could be empty.</line>
        </doc>
      </arg>
      <arg name="statusValue" type="q" direction="out">
        <doc>
          <line>statusValue = enum(INVALID,NOT_STARTED,SEARCHING,FINISHED, ... )</line>
        </doc>
      </arg>
      <arg name="resultListSize" type="q" direction="out">
        <doc>
          <line>resultListSize = Number of items of the results list</line>
        </doc>
      </arg>
      <arg name="resultList" type="a(usu(ddi)qa(uiv))" direction="out">
        <doc>
          <line>resultList = array[source_id,name, category, location, distance, attributes]</line>
          <line>source_id = POI unique id as known by the content access module. This id will be used by POI service to request POI details.</line>
          <line>name = POI name</line>
          <line>category = POI category unique id</line>
          <line>location = struct(lat,lon,alt)</line>
          <line>POI location</line>
          <line>lat = latitude of a vertex of the polygon in format %3.6f. Range [-90:+90]. Example: 48.053250</line>
          <line>lon = longitude of a vertex of the polygon in format %3.6f. Range [-180:+180]. Example: 48.053250</line>
          <line>alt = altitude above the sea level of the current position in meters</line>
          <line>distance = distance in meters to poi from center of the search</line>
          <line>attributes = array[struct(name, type, value)]</line>
          <line>List of attributes requested. It could be empty.</line>
          <line>id = attribute unique id (see data model)</line>
          <line>type = enum(INVALID,STRING,INTEGER,COORDINATES ...)</line>
          <line>value = value. The value depends on the attribute specifications and type.</line>
        </doc>
      </arg>
      <error name="org.genivi.poiservice.poiContentAccess.Error.CamNotAvailable">
        <doc>
          <line>This error is generated if an application tries to send data to the POI service component but the CAM id is not registered.</line>
        </doc>
      </error>
      <error name="org.genivi.poiservice.poiSearch.Error.HandleNotAvailable">
        <doc>
          <line>This error is generated if an application tries to use a poi search unique handle that is not available or not valid</line>
        </doc>
      </error>
      <error name="org.genivi.poiservice.poiContentAccess.Error.InvalidCategory">
        <doc>
          <line>The category associated to a POI is not valid or was not added by the CAM to the component.</line>
        </doc>
      </error>
    </method>
    <method name="PoiDetailsRequested">
      <doc>
        <line>PoiDetailsRequested = This method retrieves the details associated to one or more POI.</line>
        <line>It contains the name, the parent categories, the list of attributes, the icons, ... .</line>
      </doc>
      <arg name="source_id" type="au" direction="in">
        <doc>
          <line>list of poi = Unique source poi id</line>
        </doc>
      </arg>
      <arg name="results" type="a((us(ddi))aua(uiv))" direction="out">
        <doc>
          <line>results = array[details, categories, attributes]</line>
          <line>results = List of details for all the POI.</line>
          <line>details = struct(unique id, name, location)</line>
          <line>source id = POI id</line>
          <line>name = POI name</line>
          <line>location = struct(lat,lon,alt)</line>
          <line>lat = latitude of a vertex of the polygon in format %3.6f. Range [-90:+90]. Example: 48.053250</line>
          <line>lon = longitude of a vertex of the polygon in format %3.6f. Range [-180:+180]. Example: 48.053250</line>
          <line>alt = altitude above the sea level of the current position in meters</line>
          <line>categories = array[id]</line>
          <line>id = enum(INVALID,ALL_CATEGORIES,AIRPORT,RESTAURANT,HOTEL,GAZ_STATION,CAR_PARK, ...)</line>
          <line>attributes = array[struct(id, type, value)]</line>
          <line>id = attribute unique name (see data model)</line>
          <line>type = enum(INVALID,STRING,INTEGER,COORDINATES ...)</line>
          <line>value = value. The value depends on the attribute specifications and type.</line>
          <line>Note: This list only contains the available attributes. If there is no value for an optional attributes, it is not returned.</line>
        </doc>
      </arg>
      <error name="org.genivi.poiservice.poiContentAccess.Error.CamNotAvailable">
        <doc>
          <line>This error is generated if an application tries to send data to the POI service component but the CAM id is not registered.</line>
        </doc>
      </error>
      <error name="org.genivi.poiservice.poiContentAccess.Error.InvalidPoiSourceId">
        <doc>
          <line>The poi unique source id is not valid for the content access module.</line>
        </doc>
      </error>
    </method>
  </interface>
</node>
