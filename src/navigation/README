Release date of the file: 09-03-2016 
Status: OK

Project:
Navigation software based on Navit and compliant with the Navigation APIs standardized by the GENIVI Alliance
This project is one of the navigation-service common projects that implements the GENIVI navigation APIs.

More:
The GENIVI APIs are implemented into navit plugins, running on DBus. The HMI is made in Qml
See also other navigation projects like proof of concepts implemented for poi-service, traffic-info and positioning 

What is in:
This folder contains scripts for building Navit and the GENIVI plugins. It runs only the navigation middleware (without the HMI)
FYI: the application (with the HMI) is located into git://git.projects.genivi.org/lbs/navigation-application.git
     it's possible to build and run the whole stuff directly from that repository

Author: 
Martin Schaller <martin.schaller@it-schaller.de>
Philippe Colliot philippe.colliot@mpsa.com
Marco Residori marco.residori@xse.de

License: 
See headers and LICENSE file

Test target: 
Ubuntu 14.04 LTS

===============================
Current versions of additional code 
===============================
<current version of positioning> (git): 48451e36a8c21afb00575227d27e10417c27878c
<current version of navit> (git): 162a3e43d14531a7053872903674351a3142eea2

===============================
How to get additional code 
===============================
Get positioning:
git clone http://git.projects.genivi.org/lbs/positioning.git ./positioning
cd positioning
git checkout <current version of positioning>
cd ../

Get navit:
git clone https://github.com/navit-gps/navit.git
cd navit
git checkout <current version of navit>
cd ../


Now apply a patch to navit (The r5549 removed the  get_unique features used by GetSpell):
cd navit
patch -p0 -i ../patches/search_list_get_unique.diff
cd ../

===============================
Directory Structure
===============================
map-viewer/
the plugins for the map rendering and manipulation (zoom, scroll..)
navigation-core/
the plugins for basic navigation features (location input, route calculation...)
poi-cam/
the plugins for poi content access module 
patches/
some patches to complete the navit code
map/
the map
navit/
basic code of navit
positioning/
the code of positioning

===============================
How To Build
===============================

==========================================
Known issues
==========================================
There's an issue with navit (R6135) against gtk. 
If the env variable NAVIT_GRAPHICS is not set, by default the graphics are gtk based.
- for gtk, navit checks for freetype. Because of a missing symbolic link, it's necessary to do ln -s /usr/include/freetype2/ /usr/include/freetype 
- despite navit enables gtk_drawing, there's a pb during runtime (to be fixed)
So, for the time being, export NAVIT_GRAPHICS='sdl' is set into the run script

==========================================
All-in-one script 
==========================================
./rebuild_all.sh

==========================================
How-to step by step, with explanations
==========================================

(you're supposed to have got additional code before)

Create and enter the build folder:
mkdir ./build
cd build

For the time being, navit is not being able to be built directly with the top CmakeLists.txt (to be improved), so it's needed to do it separately:
mkdir navit
cd navit
cmake -DDISABLE_QT=1 -DSAMPLE_MAP=0 -Dvehicle/null=1 -Dgraphics/qt_qpainter=0 ../../navit/
make
cd ../

Now let's build the other parts:
cmake ../
make
cd ..

===============================
How To Run
===============================
./run -r

===============================
How To Test
===============================
(launch a new term and go to the CWD of this README)
cd ../../test/navigation
./test-route-calculation.py

If everything is OK, you must see:

Test PASSED

===============================
How To for Yocto
===============================
Due to a different way to manage the build, some specific settings are required:

cmake -DYOCTO_BUILD=ON ../



