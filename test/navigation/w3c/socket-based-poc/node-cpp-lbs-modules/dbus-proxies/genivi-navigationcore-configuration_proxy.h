
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx___home_psa_Desktop_genivi_navigation_master_src_navigation_build_dbus_include_navigation_core_genivi_navigationcore_configuration_proxy_h__PROXY_MARSHAL_H
#define __dbusxx___home_psa_Desktop_genivi_navigation_master_src_navigation_build_dbus_include_navigation_core_genivi_navigationcore_configuration_proxy_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace genivi {
namespace navigationcore {

class Configuration_proxy
: public ::DBus::InterfaceProxy
{
public:

    Configuration_proxy()
    : ::DBus::InterfaceProxy("org.genivi.navigationcore.Configuration")
    {
        connect_signal(Configuration_proxy, ConfigurationChanged, _ConfigurationChanged_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    ::DBus::Struct< uint16_t, uint16_t, uint16_t, std::string > GetVersion()
    {
        ::DBus::CallMessage call;
        call.member("GetVersion");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint16_t, uint16_t, uint16_t, std::string > argout;
        ri >> argout;
        return argout;
    }

    void SetUnitsOfMeasurement(const std::map< int32_t, int32_t >& unitsOfMeasurement)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << unitsOfMeasurement;
        call.member("SetUnitsOfMeasurement");
        ::DBus::Message ret = invoke_method (call);
    }

    std::map< int32_t, int32_t > GetUnitsOfMeasurement()
    {
        ::DBus::CallMessage call;
        call.member("GetUnitsOfMeasurement");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< int32_t, int32_t > argout;
        ri >> argout;
        return argout;
    }

    std::map< int32_t, std::vector< int32_t > > GetSupportedUnitsOfMeasurement()
    {
        ::DBus::CallMessage call;
        call.member("GetSupportedUnitsOfMeasurement");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< int32_t, std::vector< int32_t > > argout;
        ri >> argout;
        return argout;
    }

    void SetTimeFormat(const int32_t& timeFormat)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << timeFormat;
        call.member("SetTimeFormat");
        ::DBus::Message ret = invoke_method (call);
    }

    int32_t GetTimeFormat()
    {
        ::DBus::CallMessage call;
        call.member("GetTimeFormat");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    std::vector< int32_t > GetSupportedTimeFormats()
    {
        ::DBus::CallMessage call;
        call.member("GetSupportedTimeFormats");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< int32_t > argout;
        ri >> argout;
        return argout;
    }

    void SetCoordinatesFormat(const int32_t& coordinatesFormat)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << coordinatesFormat;
        call.member("SetCoordinatesFormat");
        ::DBus::Message ret = invoke_method (call);
    }

    int32_t GetCoordinatesFormat()
    {
        ::DBus::CallMessage call;
        call.member("GetCoordinatesFormat");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    std::vector< int32_t > GetSupportedCoordinatesFormats()
    {
        ::DBus::CallMessage call;
        call.member("GetSupportedCoordinatesFormats");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< int32_t > argout;
        ri >> argout;
        return argout;
    }

    void SetLocale(const std::string& languageCode, const std::string& countryCode, const std::string& scriptCode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << languageCode;
        wi << countryCode;
        wi << scriptCode;
        call.member("SetLocale");
        ::DBus::Message ret = invoke_method (call);
    }

    void GetLocale(std::string& languageCode, std::string& countryCode, std::string& scriptCode)
    {
        ::DBus::CallMessage call;
        call.member("GetLocale");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> languageCode;
        ri >> countryCode;
        ri >> scriptCode;
    }

    std::vector< ::DBus::Struct< std::string, std::string, std::string > > GetSupportedLocales()
    {
        ::DBus::CallMessage call;
        call.member("GetSupportedLocales");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Struct< std::string, std::string, std::string > > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void ConfigurationChanged(const std::vector< int32_t >& changedSettings) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _ConfigurationChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::vector< int32_t > changedSettings;
        ri >> changedSettings;
        ConfigurationChanged(changedSettings);
    }
};

} } } 
#endif //__dbusxx___home_psa_Desktop_genivi_navigation_master_src_navigation_build_dbus_include_navigation_core_genivi_navigationcore_configuration_proxy_h__PROXY_MARSHAL_H
