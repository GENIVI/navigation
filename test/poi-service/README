Release date of the file: 03-08-2015 
Status: OK

Project:
Search engine for Point Of Interest with a content access module mechanism to extend to additional sources of data
This project is one of the navigation-service common projects that implements the GENIVI navigation APIs.

More:
The project is made of four parts:
- poi-supplier that populates a sqlite3 based database from OSM data in xml format (you need -DWITH_DATABASE_SUPPLIER=ON)
- poi-server that implements the poi search API and access an embedded database
- poi-contentaccess-module that implements a content access module that access an additional database, and a simple HMI 
- poi-client that implements a client with a test HMI 
See also other navigation projects like navigation or proof of concepts implemented for traffic-info and positioning 

What is in:
This folder contains scripts for building poi-supplier, poi-contentaccess-module and poi-client, generating the databases and launching the whole stuff (build poi-server if necessary)
FYI: poi-server is located under src/poi-service

Author: 
Philippe Colliot philippe.colliot@mpsa.com

License: 
See headers and LICENSE file (mainly MPL V2)

Test target: 
Ubuntu 14.04 LTS

Qt version:
Qt5 (to get the version -> qtchooser -print-env, to set the version -> export QT-SELECT=<version>)

To get the code:
Code is part of the navigation-service repository, so you need to clone all:
git clone http://git.projects.genivi.org/lbs/navigation-service.git $WORKING-DIR
 
Important notice before building the POC:
# The software is using stream conversion, so please care if your local settings are right
# There could be a potential runtime error due to a wrong sql request (problem with the use of ',' in place of '.')
# so, if you enter 
locale | grep 'LC_NUMERIC' 
# you must get
LC_NUMERIC="en_US.UTF-8"

===============================
Current versions of additional code 
===============================
<current version of positioning> (git): 32f9e5ce48f76c5c9833dda0e1743ab8b45dc574

===============================
How to get additional code 
===============================
Get positioning:
git clone http://git.projects.genivi.org/lbs/positioning.git ./positioning
cd positioning
git checkout <current version of positioning>
cd ../

===============================
How To Build
===============================
(you're supposed to have got additional code before)

Create and enter the build folder:
mkdir ./build
cd build

Build:
cmake ../
make
cd ..

===============================
How To Prepare the database and the configuration for a country
===============================
NB: You need to build the poi-supplier first:
cd build
cmake -DWITH_DATABASE_SUPPLIER=ON ../
make

To launch the stuff for Paris:
./prepare -c paris

NB:
As examples, three databases can be generated for Paris, Tokyo and San-Diego
The input stuff is taken from the OSM, by using this site:
http://www.overpass-api.de

For instance, in Paris area, the bounding box used for the demo is
bbox=2.246304,48.814551,2.430325,48.901289
In case we want to get the hotels and the museums located inside the area defined, request is:
http://www.overpass-api.de/api/xapi?*[bbox=2.246304,48.814551,2.430325,48.901289][tourism=museum|hotel]
for the stations:
http://www.overpass-api.de/api/xapi?*[bbox=2.246304,48.814551,2.430325,48.901289][railway=station]
for the bicycle
http://www.overpass-api.de/api/xapi?*[bbox=2.246304,48.814551,2.430325,48.901289][shop=bicycle]
for the fuel stations
http://www.overpass-api.de/api/xapi?*[bbox=2.246304,48.814551,2.430325,48.901289][amenity=fuel]

For Tokyo, the bounding box is 139.691048,35.631628,139.832497,35.738153

NB: In case you get such error message during runtime:
D-Bus library appears to be incorrectly set up; failed to read machine uuid: Failed to open "/etc/machine-id": No such file or directory
You need to fix it by:
sudo su
dbus-uuidgen  > /etc/machine-id

===============================
How To Run
===============================

./run 

===============================
How To Build poi-common-manager-client (experimental)
===============================
First you need to build the poi-manager-server, see the README in ../../src/poi-service

cd build
cmake -DWITH_FRANCA_INTERFACE=ON -DCOMMONAPI_DBUS_TOOL_GENERATOR=<common-api-dbus-tools folder>/org.genivi.commonapi.dbus.cli.product/target/products/org.genivi.commonapi.dbus.cli.product/linux/gtk/x86/commonapi-dbus-generator-linux-x86 -DCOMMONAPI_TOOL_GENERATOR=<common-api-tools folder>/org.genivi.commonapi.core.cli.product/target/products/org.genivi.commonapi.core.cli.product/linux/gtk/x86/commonapi-generator-linux-x86 -DWITH_DEBUG=ON ../
make

===============================
How To Run
===============================

Launch the server (into ../../src/poi-service)
cp ./resource/poi-database-managed.db ./bin
./bin/poi-manager-server -f ./bin/poi-database-managed.db
poi manager server started

Launch the client
./poi-manager-client -t
poi manager client started

